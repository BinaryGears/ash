Extension {
    name: "VK_AMD_buffer_marker",
    comment: None,
    number: Some(
        180,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Daniel Rakos @drakos-amd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "devtools",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_BUFFER_MARKER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_BUFFER_MARKER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_buffer_marker\"",
                            extends: None,
                        },
                    },
                ),
                Command {
                    name: "vkCmdWriteBufferMarkerAMD",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "transfer,graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "transfer",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdWriteBufferMarkerAMD",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineStageFlagBits",
                ),
                name: "pipelineStage",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "dstBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "dstOffset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "marker",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdWriteBufferMarkerAMD ( VkCommandBuffer  commandBuffer ,  VkPipelineStageFlagBits  pipelineStage ,  VkBuffer  dstBuffer ,  VkDeviceSize  dstOffset ,  uint32_t  marker );",
}
Extension {
    name: "VK_AMD_device_coherent_memory",
    comment: None,
    number: Some(
        230,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Tobias Hector @tobski",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_device_coherent_memory\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 6,
                            extends: Some(
                                "VkMemoryPropertyFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 7,
                            extends: Some(
                                "VkMemoryPropertyFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceCoherentMemoryFeaturesAMD",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_display_native_hdr",
    comment: None,
    number: Some(
        214,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Matthaeus G. Chajdas @anteru",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2,VK_KHR_get_surface_capabilities2,VK_KHR_swapchain",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_display_native_hdr\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDisplayNativeHdrSurfaceCapabilitiesAMD",
                    comment: None,
                },
                Type {
                    name: "VkSwapchainDisplayNativeHdrCreateInfoAMD",
                    comment: None,
                },
                Command {
                    name: "vkSetLocalDimmingAMD",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkSetLocalDimmingAMD",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapChain",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBool32",
                ),
                name: "localDimmingEnable",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkSetLocalDimmingAMD ( VkDevice  device ,  VkSwapchainKHR  swapChain ,  VkBool32  localDimmingEnable );",
}
Extension {
    name: "VK_AMD_draw_indirect_count",
    comment: None,
    number: Some(
        34,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Daniel Rakos @drakos-amd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_KHR_draw_indirect_count",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_draw_indirect_count\"",
                            extends: None,
                        },
                    },
                ),
                Command {
                    name: "vkCmdDrawIndirectCountAMD",
                    comment: None,
                },
                Command {
                    name: "vkCmdDrawIndexedIndirectCountAMD",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_gcn_shader",
    comment: None,
    number: Some(
        26,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Dominik Witczak @dominikwitczakamd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_GCN_SHADER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_GCN_SHADER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_gcn_shader\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_gpu_shader_half_float",
    comment: None,
    number: Some(
        37,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Dominik Witczak @dominikwitczakamd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_KHR_shader_float16_int8",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_gpu_shader_half_float\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_gpu_shader_int16",
    comment: None,
    number: Some(
        133,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Qun Lin @linqun",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_KHR_shader_float16_int8",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_GPU_SHADER_INT16_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_gpu_shader_int16\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_memory_overallocation_behavior",
    comment: None,
    number: Some(
        190,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Martin Dinkov @mdinkov",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_memory_overallocation_behavior\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkMemoryOverallocationBehaviorAMD",
                    comment: None,
                },
                Type {
                    name: "VkDeviceMemoryOverallocationCreateInfoAMD",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_mixed_attachment_samples",
    comment: None,
    number: Some(
        137,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Matthaeus G. Chajdas @anteru",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_mixed_attachment_samples\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_negative_viewport_height",
    comment: None,
    number: Some(
        36,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Matthaeus G. Chajdas @anteru",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: Some(
        "VK_KHR_maintenance1",
    ),
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_negative_viewport_height\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_pipeline_compiler_control",
    comment: None,
    number: Some(
        184,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Matthaeus G. Chajdas @anteru",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_pipeline_compiler_control\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPipelineCompilerControlFlagBitsAMD",
                    comment: None,
                },
                Type {
                    name: "VkPipelineCompilerControlFlagsAMD",
                    comment: None,
                },
                Type {
                    name: "VkPipelineCompilerControlCreateInfoAMD",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_rasterization_order",
    comment: None,
    number: Some(
        19,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Daniel Rakos @drakos-amd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_rasterization_order\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkRasterizationOrderAMD",
                    comment: None,
                },
                Type {
                    name: "VkPipelineRasterizationStateRasterizationOrderAMD",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_shader_ballot",
    comment: None,
    number: Some(
        38,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Dominik Witczak @dominikwitczakamd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_BALLOT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_BALLOT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_shader_ballot\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_shader_core_properties",
    comment: None,
    number: Some(
        186,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Martin Dinkov @mdinkov",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_shader_core_properties\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderCorePropertiesAMD",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_shader_core_properties2",
    comment: None,
    number: Some(
        228,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Matthaeus G. Chajdas @anteru",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_AMD_shader_core_properties",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_shader_core_properties2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderCoreProperties2AMD",
                    comment: None,
                },
                Type {
                    name: "VkShaderCorePropertiesFlagBitsAMD",
                    comment: None,
                },
                Type {
                    name: "VkShaderCorePropertiesFlagsAMD",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_shader_explicit_vertex_parameter",
    comment: None,
    number: Some(
        22,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Qun Lin @linqun",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_shader_explicit_vertex_parameter\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_shader_fragment_mask",
    comment: None,
    number: Some(
        138,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Aaron Hagan @AaronHaganAMD",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_shader_fragment_mask\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_shader_image_load_store_lod",
    comment: None,
    number: Some(
        47,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Dominik Witczak @dominikwitczakamd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_shader_image_load_store_lod\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_shader_info",
    comment: None,
    number: Some(
        43,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Jaakko Konttinen @jaakkoamd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "devtools",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_INFO_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_INFO_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_shader_info\"",
                            extends: None,
                        },
                    },
                ),
                Type {
                    name: "VkShaderInfoTypeAMD",
                    comment: None,
                },
                Type {
                    name: "VkShaderResourceUsageAMD",
                    comment: None,
                },
                Type {
                    name: "VkShaderStatisticsInfoAMD",
                    comment: None,
                },
                Command {
                    name: "vkGetShaderInfoAMD",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetShaderInfoAMD",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipeline",
                ),
                name: "pipeline",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkShaderStageFlagBits",
                ),
                name: "shaderStage",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkShaderInfoTypeAMD",
                ),
                name: "infoType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "size_t",
                ),
                name: "pInfoSize",
            },
        },
        CommandParam {
            len: Some(
                "pInfoSize",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetShaderInfoAMD ( VkDevice  device ,  VkPipeline  pipeline ,  VkShaderStageFlagBits  shaderStage ,  VkShaderInfoTypeAMD  infoType ,  size_t*  pInfoSize ,  void*  pInfo );",
}
Extension {
    name: "VK_AMD_shader_trinary_minmax",
    comment: None,
    number: Some(
        21,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Qun Lin @linqun",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_shader_trinary_minmax\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_AMD_texture_gather_bias_lod",
    comment: None,
    number: Some(
        42,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Rex Xu @amdrexu",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_AMD_texture_gather_bias_lod\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkTextureLODGatherFormatPropertiesAMD",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_ANDROID_external_memory_android_hardware_buffer",
    comment: None,
    number: Some(
        130,
    ),
    protect: None,
    platform: Some(
        "android",
    ),
    author: Some(
        "ANDROID",
    ),
    contact: Some(
        "Jesse Hall @critsec",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_sampler_ycbcr_conversion,VK_KHR_external_memory,VK_EXT_queue_family_foreign,VK_KHR_dedicated_allocation",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_ANDROID_external_memory_android_hardware_buffer\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 10,
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkAndroidHardwareBufferUsageANDROID",
                    comment: None,
                },
                Type {
                    name: "VkAndroidHardwareBufferPropertiesANDROID",
                    comment: None,
                },
                Type {
                    name: "VkAndroidHardwareBufferFormatPropertiesANDROID",
                    comment: None,
                },
                Type {
                    name: "VkImportAndroidHardwareBufferInfoANDROID",
                    comment: None,
                },
                Type {
                    name: "VkMemoryGetAndroidHardwareBufferInfoANDROID",
                    comment: None,
                },
                Type {
                    name: "VkExternalFormatANDROID",
                    comment: None,
                },
                Command {
                    name: "vkGetAndroidHardwareBufferPropertiesANDROID",
                    comment: None,
                },
                Command {
                    name: "vkGetMemoryAndroidHardwareBufferANDROID",
                    comment: None,
                },
                Type {
                    name: "AHardwareBuffer",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetAndroidHardwareBufferPropertiesANDROID",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "AHardwareBuffer",
                ),
                name: "buffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAndroidHardwareBufferPropertiesANDROID",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetAndroidHardwareBufferPropertiesANDROID ( VkDevice  device , const struct  AHardwareBuffer*  buffer ,  VkAndroidHardwareBufferPropertiesANDROID*  pProperties );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetMemoryAndroidHardwareBufferANDROID",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMemoryGetAndroidHardwareBufferInfoANDROID",
                ),
                name: "pInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "AHardwareBuffer",
                ),
                name: "pBuffer",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetMemoryAndroidHardwareBufferANDROID ( VkDevice  device , const  VkMemoryGetAndroidHardwareBufferInfoANDROID*  pInfo , struct  AHardwareBuffer**  pBuffer );",
}
Extension {
    name: "VK_EXT_4444_formats",
    comment: None,
    number: Some(
        341,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Joshua Ashton @Joshua-Ashton",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_4444_FORMATS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_4444_FORMATS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_4444_formats\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevice4444FormatsFeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_acquire_xlib_display",
    comment: None,
    number: Some(
        90,
    ),
    protect: None,
    platform: Some(
        "xlib_xrandr",
    ),
    author: Some(
        "NV",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_EXT_direct_mode_display",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_acquire_xlib_display\"",
                            extends: None,
                        },
                    },
                ),
                Command {
                    name: "vkAcquireXlibDisplayEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetRandROutputDisplayEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkAcquireXlibDisplayEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "Display",
                ),
                name: "dpy",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayKHR",
                ),
                name: "display",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkAcquireXlibDisplayEXT ( VkPhysicalDevice  physicalDevice ,  Display*  dpy ,  VkDisplayKHR  display );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetRandROutputDisplayEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "Display",
                ),
                name: "dpy",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "RROutput",
                ),
                name: "rrOutput",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayKHR",
                ),
                name: "pDisplay",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetRandROutputDisplayEXT ( VkPhysicalDevice  physicalDevice ,  Display*  dpy ,  RROutput  rrOutput ,  VkDisplayKHR*  pDisplay );",
}
Extension {
    name: "VK_EXT_astc_decode_mode",
    comment: None,
    number: Some(
        68,
    ),
    protect: None,
    platform: None,
    author: Some(
        "ARM",
    ),
    contact: Some(
        "Jan-Harald Fredriksen @janharaldfredriksen-arm",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_astc_decode_mode\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImageViewASTCDecodeModeEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceASTCDecodeFeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_blend_operation_advanced",
    comment: None,
    number: Some(
        149,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_blend_operation_advanced\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineColorBlendAdvancedStateCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkBlendOverlapEXT",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_ZERO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_SRC_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_DST_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_SRC_OVER_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_DST_OVER_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_SRC_IN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_DST_IN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_SRC_OUT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_DST_OUT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 8,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_SRC_ATOP_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 9,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_DST_ATOP_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 10,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_XOR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 11,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_MULTIPLY_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 12,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_SCREEN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 13,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_OVERLAY_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 14,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_DARKEN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 15,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_LIGHTEN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 16,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_COLORDODGE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 17,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_COLORBURN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 18,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_HARDLIGHT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 19,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_SOFTLIGHT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 20,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_DIFFERENCE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 21,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_EXCLUSION_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 22,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_INVERT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 23,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_INVERT_RGB_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 24,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_LINEARDODGE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 25,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_LINEARBURN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 26,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_VIVIDLIGHT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 27,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_LINEARLIGHT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 28,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_PINLIGHT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 29,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_HARDMIX_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 30,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_HSL_HUE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 31,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_HSL_SATURATION_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 32,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_HSL_COLOR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 33,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_HSL_LUMINOSITY_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 34,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_PLUS_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 35,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_PLUS_CLAMPED_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 36,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 37,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_PLUS_DARKER_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 38,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_MINUS_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 39,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_MINUS_CLAMPED_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 40,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_CONTRAST_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 41,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_INVERT_OVG_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 42,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_RED_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 43,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_GREEN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 44,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BLEND_OP_BLUE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 45,
                            extends: "VkBlendOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 19,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_buffer_device_address",
    comment: None,
    number: Some(
        245,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_KHR_buffer_device_address",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_buffer_device_address\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT",
                            extends: Some(
                                "VkBufferUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",
                            extends: Some(
                                "VkBufferCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_INVALID_DEVICE_ADDRESS_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS",
                            extends: Some(
                                "VkResult",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceBufferAddressFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkBufferDeviceAddressInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkBufferDeviceAddressCreateInfoEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetBufferDeviceAddressEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_calibrated_timestamps",
    comment: None,
    number: Some(
        185,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Daniel Rakos @drakos-amd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_calibrated_timestamps\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkTimeDomainEXT",
                    comment: None,
                },
                Type {
                    name: "VkCalibratedTimestampInfoEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetCalibratedTimestampsEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pTimeDomainCount",
            },
        },
        CommandParam {
            len: Some(
                "pTimeDomainCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkTimeDomainEXT",
                ),
                name: "pTimeDomains",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceCalibrateableTimeDomainsEXT ( VkPhysicalDevice  physicalDevice ,  uint32_t*  pTimeDomainCount ,  VkTimeDomainEXT*  pTimeDomains );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetCalibratedTimestampsEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "timestampCount",
            },
        },
        CommandParam {
            len: Some(
                "timestampCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCalibratedTimestampInfoEXT",
                ),
                name: "pTimestampInfos",
            },
        },
        CommandParam {
            len: Some(
                "timestampCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint64_t",
                ),
                name: "pTimestamps",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint64_t",
                ),
                name: "pMaxDeviation",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetCalibratedTimestampsEXT ( VkDevice  device ,  uint32_t  timestampCount , const  VkCalibratedTimestampInfoEXT*  pTimestampInfos ,  uint64_t*  pTimestamps ,  uint64_t*  pMaxDeviation );",
}
Extension {
    name: "VK_EXT_conditional_rendering",
    comment: None,
    number: Some(
        82,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Vikram Kushwaha @vkushwaha",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_conditional_rendering\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkConditionalRenderingFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkConditionalRenderingFlagBitsEXT",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT",
                        comment: Some(
                            "read access flag for reading conditional rendering predicate",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 20,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT",
                        comment: Some(
                            "Specifies the buffer can be used as predicate in conditional rendering",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 9,
                            extends: Some(
                                "VkBufferUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT",
                        comment: Some(
                            "A pipeline stage for conditional rendering predicate fetch",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 18,
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Command {
                    name: "vkCmdBeginConditionalRenderingEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdEndConditionalRenderingEXT",
                    comment: None,
                },
                Type {
                    name: "VkConditionalRenderingBeginInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceConditionalRenderingFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkCommandBufferInheritanceConditionalRenderingInfoEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBeginConditionalRenderingEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkConditionalRenderingBeginInfoEXT",
                ),
                name: "pConditionalRenderingBegin",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBeginConditionalRenderingEXT ( VkCommandBuffer  commandBuffer , const  VkConditionalRenderingBeginInfoEXT*  pConditionalRenderingBegin );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdEndConditionalRenderingEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdEndConditionalRenderingEXT ( VkCommandBuffer  commandBuffer );",
}
Extension {
    name: "VK_EXT_conservative_rasterization",
    comment: None,
    number: Some(
        102,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_conservative_rasterization\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceConservativeRasterizationPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineRasterizationConservativeStateCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineRasterizationConservativeStateCreateFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkConservativeRasterizationModeEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_custom_border_color",
    comment: None,
    number: Some(
        288,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Liam Middlebrook @liam-middlebrook",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "12",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_custom_border_color\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkBorderColor",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BORDER_COLOR_INT_CUSTOM_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkBorderColor",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkSamplerCustomBorderColorCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceCustomBorderColorPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceCustomBorderColorFeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_debug_marker",
    comment: None,
    number: Some(
        23,
    ),
    protect: None,
    platform: None,
    author: Some(
        "Baldur Karlsson",
    ),
    contact: Some(
        "Baldur Karlsson @baldurk",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_EXT_debug_report",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_EXT_debug_utils",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "debugging",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DEBUG_MARKER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "4",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DEBUG_MARKER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_debug_marker\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDebugReportObjectTypeEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugMarkerObjectNameInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugMarkerObjectTagInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugMarkerMarkerInfoEXT",
                    comment: None,
                },
                Command {
                    name: "vkDebugMarkerSetObjectTagEXT",
                    comment: None,
                },
                Command {
                    name: "vkDebugMarkerSetObjectNameEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdDebugMarkerBeginEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdDebugMarkerEndEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdDebugMarkerInsertEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkDebugMarkerSetObjectTagEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "pTagInfo->object",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugMarkerObjectTagInfoEXT",
                ),
                name: "pTagInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkDebugMarkerSetObjectTagEXT ( VkDevice  device , const  VkDebugMarkerObjectTagInfoEXT*  pTagInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkDebugMarkerSetObjectNameEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "pNameInfo->object",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugMarkerObjectNameInfoEXT",
                ),
                name: "pNameInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkDebugMarkerSetObjectNameEXT ( VkDevice  device , const  VkDebugMarkerObjectNameInfoEXT*  pNameInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdDebugMarkerBeginEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugMarkerMarkerInfoEXT",
                ),
                name: "pMarkerInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdDebugMarkerBeginEXT ( VkCommandBuffer  commandBuffer , const  VkDebugMarkerMarkerInfoEXT*  pMarkerInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdDebugMarkerEndEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdDebugMarkerEndEXT ( VkCommandBuffer  commandBuffer );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdDebugMarkerInsertEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugMarkerMarkerInfoEXT",
                ),
                name: "pMarkerInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdDebugMarkerInsertEXT ( VkCommandBuffer  commandBuffer , const  VkDebugMarkerMarkerInfoEXT*  pMarkerInfo );",
}
Extension {
    name: "VK_EXT_debug_report",
    comment: None,
    number: Some(
        12,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Courtney Goeltzenleuchter @courtney-g",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_EXT_debug_utils",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "debugging",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DEBUG_REPORT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "9",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DEBUG_REPORT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_debug_report\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT",
                        comment: Some(
                            "Backwards-compatible alias containing a typo",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_VALIDATION_FAILED_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkResult",
                            extnumber: None,
                            dir: false,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT",
                        comment: Some(
                            "VkDebugReportCallbackEXT",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDebugReportCallbackEXT",
                    comment: None,
                },
                Type {
                    name: "PFN_vkDebugReportCallbackEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugReportFlagBitsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugReportFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugReportObjectTypeEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugReportCallbackCreateInfoEXT",
                    comment: None,
                },
                Command {
                    name: "vkCreateDebugReportCallbackEXT",
                    comment: None,
                },
                Command {
                    name: "vkDestroyDebugReportCallbackEXT",
                    comment: None,
                },
                Command {
                    name: "vkDebugReportMessageEXT",
                    comment: None,
                },
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: Some(
                "VK_VERSION_1_1",
            ),
            comment: None,
            items: [
                Comment(
                    "This duplicates definitions in other extensions, below",
                ),
                Enum(
                    Enum {
                        name: "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDebugReportObjectTypeEXT",
                            extnumber: Some(
                                157,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDebugReportObjectTypeEXT",
                            extnumber: Some(
                                86,
                            ),
                            dir: true,
                        },
                    },
                ),
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateDebugReportCallbackEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugReportCallbackCreateInfoEXT",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugReportCallbackEXT",
                ),
                name: "pCallback",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateDebugReportCallbackEXT ( VkInstance  instance , const  VkDebugReportCallbackCreateInfoEXT*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkDebugReportCallbackEXT*  pCallback );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroyDebugReportCallbackEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugReportCallbackEXT",
                ),
                name: "callback",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroyDebugReportCallbackEXT ( VkInstance  instance ,  VkDebugReportCallbackEXT  callback , const  VkAllocationCallbacks*  pAllocator );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDebugReportMessageEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugReportFlagsEXT",
                ),
                name: "flags",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugReportObjectTypeEXT",
                ),
                name: "objectType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint64_t",
                ),
                name: "object",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "size_t",
                ),
                name: "location",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "int32_t",
                ),
                name: "messageCode",
            },
        },
        CommandParam {
            len: Some(
                "null-terminated",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "char",
                ),
                name: "pLayerPrefix",
            },
        },
        CommandParam {
            len: Some(
                "null-terminated",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "char",
                ),
                name: "pMessage",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDebugReportMessageEXT ( VkInstance  instance ,  VkDebugReportFlagsEXT  flags ,  VkDebugReportObjectTypeEXT  objectType ,  uint64_t  object ,  size_t  location ,  int32_t  messageCode , const  char*  pLayerPrefix , const  char*  pMessage );",
}
Extension {
    name: "VK_EXT_debug_utils",
    comment: None,
    number: Some(
        129,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Mark Young @marky-lunarg",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "debugging",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DEBUG_UTILS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DEBUG_UTILS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_debug_utils\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT",
                        comment: Some(
                            "VkDebugUtilsMessengerEXT",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "PFN_vkDebugUtilsMessengerCallbackEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsLabelEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsMessageSeverityFlagBitsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsMessageSeverityFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsMessageTypeFlagBitsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsMessageTypeFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsMessengerCallbackDataEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsMessengerCallbackDataFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsMessengerCreateFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsMessengerCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsMessengerEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsObjectNameInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkDebugUtilsObjectTagInfoEXT",
                    comment: None,
                },
                Command {
                    name: "vkSetDebugUtilsObjectNameEXT",
                    comment: None,
                },
                Command {
                    name: "vkSetDebugUtilsObjectTagEXT",
                    comment: None,
                },
                Command {
                    name: "vkQueueBeginDebugUtilsLabelEXT",
                    comment: None,
                },
                Command {
                    name: "vkQueueEndDebugUtilsLabelEXT",
                    comment: None,
                },
                Command {
                    name: "vkQueueInsertDebugUtilsLabelEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdBeginDebugUtilsLabelEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdEndDebugUtilsLabelEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdInsertDebugUtilsLabelEXT",
                    comment: None,
                },
                Command {
                    name: "vkCreateDebugUtilsMessengerEXT",
                    comment: None,
                },
                Command {
                    name: "vkDestroyDebugUtilsMessengerEXT",
                    comment: None,
                },
                Command {
                    name: "vkSubmitDebugUtilsMessageEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkSetDebugUtilsObjectNameEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "pNameInfo->objectHandle",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsObjectNameInfoEXT",
                ),
                name: "pNameInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkSetDebugUtilsObjectNameEXT ( VkDevice  device , const  VkDebugUtilsObjectNameInfoEXT*  pNameInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkSetDebugUtilsObjectTagEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "pTagInfo->objectHandle",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsObjectTagInfoEXT",
                ),
                name: "pTagInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkSetDebugUtilsObjectTagEXT ( VkDevice  device , const  VkDebugUtilsObjectTagInfoEXT*  pTagInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkQueueBeginDebugUtilsLabelEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueue",
                ),
                name: "queue",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsLabelEXT",
                ),
                name: "pLabelInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkQueueBeginDebugUtilsLabelEXT ( VkQueue  queue , const  VkDebugUtilsLabelEXT*  pLabelInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkQueueEndDebugUtilsLabelEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueue",
                ),
                name: "queue",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkQueueEndDebugUtilsLabelEXT ( VkQueue  queue );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkQueueInsertDebugUtilsLabelEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueue",
                ),
                name: "queue",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsLabelEXT",
                ),
                name: "pLabelInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkQueueInsertDebugUtilsLabelEXT ( VkQueue  queue , const  VkDebugUtilsLabelEXT*  pLabelInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBeginDebugUtilsLabelEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsLabelEXT",
                ),
                name: "pLabelInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBeginDebugUtilsLabelEXT ( VkCommandBuffer  commandBuffer , const  VkDebugUtilsLabelEXT*  pLabelInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdEndDebugUtilsLabelEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdEndDebugUtilsLabelEXT ( VkCommandBuffer  commandBuffer );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdInsertDebugUtilsLabelEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsLabelEXT",
                ),
                name: "pLabelInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdInsertDebugUtilsLabelEXT ( VkCommandBuffer  commandBuffer , const  VkDebugUtilsLabelEXT*  pLabelInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateDebugUtilsMessengerEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsMessengerCreateInfoEXT",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsMessengerEXT",
                ),
                name: "pMessenger",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateDebugUtilsMessengerEXT ( VkInstance  instance , const  VkDebugUtilsMessengerCreateInfoEXT*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkDebugUtilsMessengerEXT*  pMessenger );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroyDebugUtilsMessengerEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsMessengerEXT",
                ),
                name: "messenger",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroyDebugUtilsMessengerEXT ( VkInstance  instance ,  VkDebugUtilsMessengerEXT  messenger , const  VkAllocationCallbacks*  pAllocator );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkSubmitDebugUtilsMessageEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsMessageSeverityFlagBitsEXT",
                ),
                name: "messageSeverity",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsMessageTypeFlagsEXT",
                ),
                name: "messageTypes",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDebugUtilsMessengerCallbackDataEXT",
                ),
                name: "pCallbackData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkSubmitDebugUtilsMessageEXT ( VkInstance  instance ,  VkDebugUtilsMessageSeverityFlagBitsEXT  messageSeverity ,  VkDebugUtilsMessageTypeFlagsEXT  messageTypes , const  VkDebugUtilsMessengerCallbackDataEXT*  pCallbackData );",
}
Extension {
    name: "VK_EXT_depth_clip_enable",
    comment: None,
    number: Some(
        103,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "d3demulation",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_depth_clip_enable\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceDepthClipEnableFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineRasterizationDepthClipStateCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineRasterizationDepthClipStateCreateFlagsEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_depth_range_unrestricted",
    comment: None,
    number: Some(
        14,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_depth_range_unrestricted\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_descriptor_indexing",
    comment: None,
    number: Some(
        162,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2,VK_KHR_maintenance3",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_descriptor_indexing\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT",
                            extends: Some(
                                "VkDescriptorBindingFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT",
                            extends: Some(
                                "VkDescriptorBindingFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT",
                            extends: Some(
                                "VkDescriptorBindingFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT",
                            extends: Some(
                                "VkDescriptorBindingFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT",
                            extends: Some(
                                "VkDescriptorPoolCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT",
                            extends: Some(
                                "VkDescriptorSetLayoutCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_FRAGMENTATION_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ERROR_FRAGMENTATION",
                            extends: Some(
                                "VkResult",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceDescriptorIndexingFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceDescriptorIndexingPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorBindingFlagBitsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorBindingFlagsEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_device_memory_report",
    comment: None,
    number: Some(
        285,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Yiwei Zhang @zhangyiwei",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "devtools",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_device_memory_report\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkDeviceDeviceMemoryReportCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkDeviceMemoryReportCallbackDataEXT",
                    comment: None,
                },
                Type {
                    name: "VkDeviceMemoryReportFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDeviceMemoryReportEventTypeEXT",
                    comment: None,
                },
                Type {
                    name: "PFN_vkDeviceMemoryReportCallbackEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_direct_mode_display",
    comment: None,
    number: Some(
        89,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_display",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_direct_mode_display\"",
                            extends: None,
                        },
                    },
                ),
                Command {
                    name: "vkReleaseDisplayEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkReleaseDisplayEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayKHR",
                ),
                name: "display",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkReleaseDisplayEXT ( VkPhysicalDevice  physicalDevice ,  VkDisplayKHR  display );",
}
Extension {
    name: "VK_EXT_directfb_surface",
    comment: None,
    number: Some(
        347,
    ),
    protect: None,
    platform: Some(
        "directfb",
    ),
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Nicolas Caramelli @caramelli",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_directfb_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDirectFBSurfaceCreateFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDirectFBSurfaceCreateInfoEXT",
                    comment: None,
                },
                Command {
                    name: "vkCreateDirectFBSurfaceEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceDirectFBPresentationSupportEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateDirectFBSurfaceEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDirectFBSurfaceCreateInfoEXT",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateDirectFBSurfaceEXT ( VkInstance  instance , const  VkDirectFBSurfaceCreateInfoEXT*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkBool32",
        ),
        name: "vkGetPhysicalDeviceDirectFBPresentationSupportEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "queueFamilyIndex",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "IDirectFB",
                ),
                name: "dfb",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkBool32  vkGetPhysicalDeviceDirectFBPresentationSupportEXT ( VkPhysicalDevice  physicalDevice ,  uint32_t  queueFamilyIndex ,  IDirectFB*  dfb );",
}
Extension {
    name: "VK_EXT_discard_rectangles",
    comment: None,
    number: Some(
        100,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_discard_rectangles\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceDiscardRectanglePropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineDiscardRectangleStateCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineDiscardRectangleStateCreateFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkDiscardRectangleModeEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetDiscardRectangleEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetDiscardRectangleEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstDiscardRectangle",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "discardRectangleCount",
            },
        },
        CommandParam {
            len: Some(
                "discardRectangleCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkRect2D",
                ),
                name: "pDiscardRectangles",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetDiscardRectangleEXT ( VkCommandBuffer  commandBuffer ,  uint32_t  firstDiscardRectangle ,  uint32_t  discardRectangleCount , const  VkRect2D*  pDiscardRectangles );",
}
Extension {
    name: "VK_EXT_display_control",
    comment: None,
    number: Some(
        92,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_EXT_display_surface_counter,VK_KHR_swapchain",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DISPLAY_CONTROL_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_display_control\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDisplayPowerStateEXT",
                    comment: None,
                },
                Type {
                    name: "VkDeviceEventTypeEXT",
                    comment: None,
                },
                Type {
                    name: "VkDisplayEventTypeEXT",
                    comment: None,
                },
                Type {
                    name: "VkDisplayPowerInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkDeviceEventInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkDisplayEventInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkSwapchainCounterCreateInfoEXT",
                    comment: None,
                },
                Command {
                    name: "vkDisplayPowerControlEXT",
                    comment: None,
                },
                Command {
                    name: "vkRegisterDeviceEventEXT",
                    comment: None,
                },
                Command {
                    name: "vkRegisterDisplayEventEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetSwapchainCounterEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkDisplayPowerControlEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayKHR",
                ),
                name: "display",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayPowerInfoEXT",
                ),
                name: "pDisplayPowerInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkDisplayPowerControlEXT ( VkDevice  device ,  VkDisplayKHR  display , const  VkDisplayPowerInfoEXT*  pDisplayPowerInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkRegisterDeviceEventEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceEventInfoEXT",
                ),
                name: "pDeviceEventInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFence",
                ),
                name: "pFence",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkRegisterDeviceEventEXT ( VkDevice  device , const  VkDeviceEventInfoEXT*  pDeviceEventInfo , const  VkAllocationCallbacks*  pAllocator ,  VkFence*  pFence );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkRegisterDisplayEventEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayKHR",
                ),
                name: "display",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayEventInfoEXT",
                ),
                name: "pDisplayEventInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFence",
                ),
                name: "pFence",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkRegisterDisplayEventEXT ( VkDevice  device ,  VkDisplayKHR  display , const  VkDisplayEventInfoEXT*  pDisplayEventInfo , const  VkAllocationCallbacks*  pAllocator ,  VkFence*  pFence );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetSwapchainCounterEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapchain",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceCounterFlagBitsEXT",
                ),
                name: "counter",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint64_t",
                ),
                name: "pCounterValue",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetSwapchainCounterEXT ( VkDevice  device ,  VkSwapchainKHR  swapchain ,  VkSurfaceCounterFlagBitsEXT  counter ,  uint64_t*  pCounterValue );",
}
Extension {
    name: "VK_EXT_display_surface_counter",
    comment: None,
    number: Some(
        91,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_display",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_display_surface_counter\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT",
                        comment: Some(
                            "Backwards-compatible alias containing a typo",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkSurfaceCounterFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceCounterFlagBitsEXT",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceCapabilities2EXT",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSurfaceCapabilities2EXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceSurfaceCapabilities2EXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceCapabilities2EXT",
                ),
                name: "pSurfaceCapabilities",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceSurfaceCapabilities2EXT ( VkPhysicalDevice  physicalDevice ,  VkSurfaceKHR  surface ,  VkSurfaceCapabilities2EXT*  pSurfaceCapabilities );",
}
Extension {
    name: "VK_EXT_extended_dynamic_state",
    comment: None,
    number: Some(
        268,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_extended_dynamic_state\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_CULL_MODE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_FRONT_FACE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 8,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 9,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 10,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_STENCIL_OP_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 11,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceExtendedDynamicStateFeaturesEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetCullModeEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetFrontFaceEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetPrimitiveTopologyEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetViewportWithCountEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetScissorWithCountEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdBindVertexBuffers2EXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetDepthTestEnableEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetDepthWriteEnableEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetDepthCompareOpEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetDepthBoundsTestEnableEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetStencilTestEnableEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetStencilOpEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetCullModeEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCullModeFlags",
                ),
                name: "cullMode",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetCullModeEXT ( VkCommandBuffer  commandBuffer ,  VkCullModeFlags  cullMode );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetFrontFaceEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFrontFace",
                ),
                name: "frontFace",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetFrontFaceEXT ( VkCommandBuffer  commandBuffer ,  VkFrontFace  frontFace );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetPrimitiveTopologyEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPrimitiveTopology",
                ),
                name: "primitiveTopology",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetPrimitiveTopologyEXT ( VkCommandBuffer  commandBuffer ,  VkPrimitiveTopology  primitiveTopology );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetViewportWithCountEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "viewportCount",
            },
        },
        CommandParam {
            len: Some(
                "viewportCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkViewport",
                ),
                name: "pViewports",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetViewportWithCountEXT ( VkCommandBuffer  commandBuffer ,  uint32_t  viewportCount , const  VkViewport*  pViewports );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetScissorWithCountEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "scissorCount",
            },
        },
        CommandParam {
            len: Some(
                "scissorCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkRect2D",
                ),
                name: "pScissors",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetScissorWithCountEXT ( VkCommandBuffer  commandBuffer ,  uint32_t  scissorCount , const  VkRect2D*  pScissors );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBindVertexBuffers2EXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstBinding",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "bindingCount",
            },
        },
        CommandParam {
            len: Some(
                "bindingCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "pBuffers",
            },
        },
        CommandParam {
            len: Some(
                "bindingCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "pOffsets",
            },
        },
        CommandParam {
            len: Some(
                "bindingCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "pSizes",
            },
        },
        CommandParam {
            len: Some(
                "bindingCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "pStrides",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBindVertexBuffers2EXT ( VkCommandBuffer  commandBuffer ,  uint32_t  firstBinding ,  uint32_t  bindingCount , const  VkBuffer*  pBuffers , const  VkDeviceSize*  pOffsets , const  VkDeviceSize*  pSizes , const  VkDeviceSize*  pStrides );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetDepthTestEnableEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBool32",
                ),
                name: "depthTestEnable",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetDepthTestEnableEXT ( VkCommandBuffer  commandBuffer ,  VkBool32  depthTestEnable );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetDepthWriteEnableEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBool32",
                ),
                name: "depthWriteEnable",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetDepthWriteEnableEXT ( VkCommandBuffer  commandBuffer ,  VkBool32  depthWriteEnable );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetDepthCompareOpEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCompareOp",
                ),
                name: "depthCompareOp",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetDepthCompareOpEXT ( VkCommandBuffer  commandBuffer ,  VkCompareOp  depthCompareOp );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetDepthBoundsTestEnableEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBool32",
                ),
                name: "depthBoundsTestEnable",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetDepthBoundsTestEnableEXT ( VkCommandBuffer  commandBuffer ,  VkBool32  depthBoundsTestEnable );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetStencilTestEnableEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBool32",
                ),
                name: "stencilTestEnable",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetStencilTestEnableEXT ( VkCommandBuffer  commandBuffer ,  VkBool32  stencilTestEnable );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetStencilOpEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStencilFaceFlags",
                ),
                name: "faceMask",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStencilOp",
                ),
                name: "failOp",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStencilOp",
                ),
                name: "passOp",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStencilOp",
                ),
                name: "depthFailOp",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCompareOp",
                ),
                name: "compareOp",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetStencilOpEXT ( VkCommandBuffer  commandBuffer ,  VkStencilFaceFlags  faceMask ,  VkStencilOp  failOp ,  VkStencilOp  passOp ,  VkStencilOp  depthFailOp ,  VkCompareOp  compareOp );",
}
Extension {
    name: "VK_EXT_external_memory_dma_buf",
    comment: None,
    number: Some(
        126,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Chad Versace @chadversary",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_memory_fd",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_external_memory_dma_buf\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 9,
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_external_memory_host",
    comment: None,
    number: Some(
        179,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Daniel Rakos @drakos-amd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_memory",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_external_memory_host\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 7,
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 8,
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkImportMemoryHostPointerInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkMemoryHostPointerPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceExternalMemoryHostPropertiesEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetMemoryHostPointerPropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetMemoryHostPointerPropertiesEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkExternalMemoryHandleTypeFlagBits",
                ),
                name: "handleType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pHostPointer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMemoryHostPointerPropertiesEXT",
                ),
                name: "pMemoryHostPointerProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetMemoryHostPointerPropertiesEXT ( VkDevice  device ,  VkExternalMemoryHandleTypeFlagBits  handleType , const  void*  pHostPointer ,  VkMemoryHostPointerPropertiesEXT*  pMemoryHostPointerProperties );",
}
Extension {
    name: "VK_EXT_filter_cubic",
    comment: None,
    number: Some(
        171,
    ),
    protect: None,
    platform: None,
    author: Some(
        "QCOM",
    ),
    contact: Some(
        "Bill Licea-Kane @wwlk",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_FILTER_CUBIC_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_FILTER_CUBIC_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_filter_cubic\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FILTER_CUBIC_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FILTER_CUBIC_IMG",
                            extends: Some(
                                "VkFilter",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceImageViewImageFormatInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkFilterCubicImageViewImageFormatPropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_fragment_density_map",
    comment: None,
    number: Some(
        219,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Matthew Netsch @mnetsch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_fragment_density_map\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 14,
                            extends: Some(
                                "VkImageCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkImageLayout",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 24,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 24,
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 9,
                            extends: Some(
                                "VkImageUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 0,
                            extends: Some(
                                "VkImageViewCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 23,
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 0,
                            extends: Some(
                                "VkSamplerCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 1,
                            extends: Some(
                                "VkSamplerCreateFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceFragmentDensityMapFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceFragmentDensityMapPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkRenderPassFragmentDensityMapCreateInfoEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_fragment_density_map2",
    comment: None,
    number: Some(
        333,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Matthew Netsch @mnetsch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_EXT_fragment_density_map",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_fragment_density_map2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 1,
                            extends: Some(
                                "VkImageViewCreateFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceFragmentDensityMap2PropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_fragment_shader_interlock",
    comment: None,
    number: Some(
        252,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_fragment_shader_interlock\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_full_screen_exclusive",
    comment: None,
    number: Some(
        256,
    ),
    protect: None,
    platform: Some(
        "win32",
    ),
    author: Some(
        "EXT",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2,VK_KHR_surface,VK_KHR_get_surface_capabilities2,VK_KHR_swapchain",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "4",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_full_screen_exclusive\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkResult",
                            extnumber: None,
                            dir: false,
                        },
                    },
                ),
                Type {
                    name: "VkFullScreenExclusiveEXT",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceFullScreenExclusiveInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceCapabilitiesFullScreenExclusiveEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSurfacePresentModes2EXT",
                    comment: None,
                },
                Command {
                    name: "vkAcquireFullScreenExclusiveModeEXT",
                    comment: None,
                },
                Command {
                    name: "vkReleaseFullScreenExclusiveModeEXT",
                    comment: None,
                },
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_KHR_win32_surface",
            ),
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkSurfaceFullScreenExclusiveWin32InfoEXT",
                    comment: None,
                },
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_KHR_device_group",
            ),
            feature: None,
            comment: None,
            items: [
                Command {
                    name: "vkGetDeviceGroupSurfacePresentModes2EXT",
                    comment: None,
                },
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: Some(
                "VK_VERSION_1_1",
            ),
            comment: None,
            items: [
                Command {
                    name: "vkGetDeviceGroupSurfacePresentModes2EXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceSurfacePresentModes2EXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDeviceSurfaceInfo2KHR",
                ),
                name: "pSurfaceInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPresentModeCount",
            },
        },
        CommandParam {
            len: Some(
                "pPresentModeCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPresentModeKHR",
                ),
                name: "pPresentModes",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceSurfacePresentModes2EXT ( VkPhysicalDevice  physicalDevice , const  VkPhysicalDeviceSurfaceInfo2KHR*  pSurfaceInfo ,  uint32_t*  pPresentModeCount ,  VkPresentModeKHR*  pPresentModes );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkAcquireFullScreenExclusiveModeEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapchain",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkAcquireFullScreenExclusiveModeEXT ( VkDevice  device ,  VkSwapchainKHR  swapchain );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkReleaseFullScreenExclusiveModeEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapchain",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkReleaseFullScreenExclusiveModeEXT ( VkDevice  device ,  VkSwapchainKHR  swapchain );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDeviceGroupSurfacePresentModes2EXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDeviceSurfaceInfo2KHR",
                ),
                name: "pSurfaceInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceGroupPresentModeFlagsKHR",
                ),
                name: "pModes",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDeviceGroupSurfacePresentModes2EXT ( VkDevice  device , const  VkPhysicalDeviceSurfaceInfo2KHR*  pSurfaceInfo ,  VkDeviceGroupPresentModeFlagsKHR*  pModes );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDeviceGroupSurfacePresentModes2EXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDeviceSurfaceInfo2KHR",
                ),
                name: "pSurfaceInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceGroupPresentModeFlagsKHR",
                ),
                name: "pModes",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDeviceGroupSurfacePresentModes2EXT ( VkDevice  device , const  VkPhysicalDeviceSurfaceInfo2KHR*  pSurfaceInfo ,  VkDeviceGroupPresentModeFlagsKHR*  pModes );",
}
Extension {
    name: "VK_EXT_global_priority",
    comment: None,
    number: Some(
        175,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Andres Rodriguez @lostgoat",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_global_priority\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_NOT_PERMITTED_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkResult",
                            extnumber: None,
                            dir: false,
                        },
                    },
                ),
                Type {
                    name: "VkDeviceQueueGlobalPriorityCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkQueueGlobalPriorityEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_hdr_metadata",
    comment: None,
    number: Some(
        106,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Courtney Goeltzenleuchter @courtney-g",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_swapchain",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_HDR_METADATA_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_HDR_METADATA_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_hdr_metadata\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_HDR_METADATA_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkHdrMetadataEXT",
                    comment: None,
                },
                Type {
                    name: "VkXYColorEXT",
                    comment: None,
                },
                Command {
                    name: "vkSetHdrMetadataEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkSetHdrMetadataEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "swapchainCount",
            },
        },
        CommandParam {
            len: Some(
                "swapchainCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "pSwapchains",
            },
        },
        CommandParam {
            len: Some(
                "swapchainCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkHdrMetadataEXT",
                ),
                name: "pMetadata",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkSetHdrMetadataEXT ( VkDevice  device ,  uint32_t  swapchainCount , const  VkSwapchainKHR*  pSwapchains , const  VkHdrMetadataEXT*  pMetadata );",
}
Extension {
    name: "VK_EXT_headless_surface",
    comment: None,
    number: Some(
        257,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Lisa Wu @chengtianww",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_HEADLESS_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_headless_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkHeadlessSurfaceCreateFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkHeadlessSurfaceCreateInfoEXT",
                    comment: None,
                },
                Command {
                    name: "vkCreateHeadlessSurfaceEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateHeadlessSurfaceEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkHeadlessSurfaceCreateInfoEXT",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateHeadlessSurfaceEXT ( VkInstance  instance , const  VkHeadlessSurfaceCreateInfoEXT*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
Extension {
    name: "VK_EXT_host_query_reset",
    comment: None,
    number: Some(
        262,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Bas Nieuwenhuizen @BNieuwenhuizen",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_HOST_QUERY_RESET_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_host_query_reset\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceHostQueryResetFeaturesEXT",
                    comment: None,
                },
                Command {
                    name: "vkResetQueryPoolEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_image_drm_format_modifier",
    comment: None,
    number: Some(
        159,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Chad Versace @chadversary",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_bind_memory2,VK_KHR_get_physical_device_properties2,VK_KHR_image_format_list,VK_KHR_sampler_ycbcr_conversion",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_image_drm_format_modifier\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkResult",
                            extnumber: None,
                            dir: false,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkImageTiling",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 7,
                            extends: Some(
                                "VkImageAspectFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 8,
                            extends: Some(
                                "VkImageAspectFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 9,
                            extends: Some(
                                "VkImageAspectFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 10,
                            extends: Some(
                                "VkImageAspectFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkDrmFormatModifierPropertiesListEXT",
                    comment: None,
                },
                Type {
                    name: "VkDrmFormatModifierPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceImageDrmFormatModifierInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkImageDrmFormatModifierListCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkImageDrmFormatModifierExplicitCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkImageDrmFormatModifierPropertiesEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetImageDrmFormatModifierPropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetImageDrmFormatModifierPropertiesEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImage",
                ),
                name: "image",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageDrmFormatModifierPropertiesEXT",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetImageDrmFormatModifierPropertiesEXT ( VkDevice  device ,  VkImage  image ,  VkImageDrmFormatModifierPropertiesEXT*  pProperties );",
}
Extension {
    name: "VK_EXT_image_robustness",
    comment: None,
    number: Some(
        336,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Graeme Leese @gnl21",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_image_robustness\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceImageRobustnessFeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_index_type_uint8",
    comment: None,
    number: Some(
        266,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_index_type_uint8\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_INDEX_TYPE_UINT8_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkIndexType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceIndexTypeUint8FeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_inline_uniform_block",
    comment: None,
    number: Some(
        139,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Daniel Rakos @aqnuep",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2,VK_KHR_maintenance1",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_inline_uniform_block\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDescriptorType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceInlineUniformBlockFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceInlineUniformBlockPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkWriteDescriptorSetInlineUniformBlockEXT",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorPoolInlineUniformBlockCreateInfoEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_line_rasterization",
    comment: None,
    number: Some(
        260,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "cadsupport",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_LINE_RASTERIZATION_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_line_rasterization\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceLineRasterizationFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceLineRasterizationPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineRasterizationLineStateCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkLineRasterizationModeEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetLineStippleEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetLineStippleEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "lineStippleFactor",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint16_t",
                ),
                name: "lineStipplePattern",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetLineStippleEXT ( VkCommandBuffer  commandBuffer ,  uint32_t  lineStippleFactor ,  uint16_t  lineStipplePattern );",
}
Extension {
    name: "VK_EXT_memory_budget",
    comment: None,
    number: Some(
        238,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_MEMORY_BUDGET_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_MEMORY_BUDGET_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_memory_budget\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceMemoryBudgetPropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_memory_priority",
    comment: None,
    number: Some(
        239,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_MEMORY_PRIORITY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_memory_priority\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceMemoryPriorityFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkMemoryPriorityAllocateInfoEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_metal_surface",
    comment: None,
    number: Some(
        218,
    ),
    protect: None,
    platform: Some(
        "metal",
    ),
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Dzmitry Malyshau @kvark",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_METAL_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_METAL_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_metal_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkMetalSurfaceCreateFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkMetalSurfaceCreateInfoEXT",
                    comment: None,
                },
                Command {
                    name: "vkCreateMetalSurfaceEXT",
                    comment: None,
                },
                Type {
                    name: "CAMetalLayer",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateMetalSurfaceEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMetalSurfaceCreateInfoEXT",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateMetalSurfaceEXT ( VkInstance  instance , const  VkMetalSurfaceCreateInfoEXT*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
Extension {
    name: "VK_EXT_pci_bus_info",
    comment: None,
    number: Some(
        213,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Matthaeus G. Chajdas @anteru",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_PCI_BUS_INFO_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_PCI_BUS_INFO_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_pci_bus_info\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevicePCIBusInfoPropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_pipeline_creation_cache_control",
    comment: None,
    number: Some(
        298,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Gregory Grebe @grgrebe_amd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_pipeline_creation_cache_control\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 8,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 9,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_COMPILE_REQUIRED_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkResult",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PIPELINE_COMPILE_REQUIRED_EXT",
                            extends: Some(
                                "VkResult",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 0,
                            extends: Some(
                                "VkPipelineCacheCreateFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_pipeline_creation_feedback",
    comment: None,
    number: Some(
        193,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Jean-Francois Roy @jfroy",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "devtools",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_pipeline_creation_feedback\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPipelineCreationFeedbackFlagBitsEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineCreationFeedbackFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineCreationFeedbackCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineCreationFeedbackEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_post_depth_coverage",
    comment: None,
    number: Some(
        156,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_post_depth_coverage\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_private_data",
    comment: None,
    number: Some(
        296,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Matthew Rusch @mattruschnv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_PRIVATE_DATA_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_PRIVATE_DATA_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_private_data\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevicePrivateDataFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkDevicePrivateDataCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPrivateDataSlotCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPrivateDataSlotEXT",
                    comment: None,
                },
                Type {
                    name: "VkPrivateDataSlotCreateFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkPrivateDataSlotCreateFlagBitsEXT",
                    comment: None,
                },
                Command {
                    name: "vkCreatePrivateDataSlotEXT",
                    comment: None,
                },
                Command {
                    name: "vkDestroyPrivateDataSlotEXT",
                    comment: None,
                },
                Command {
                    name: "vkSetPrivateDataEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetPrivateDataEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreatePrivateDataSlotEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPrivateDataSlotCreateInfoEXT",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPrivateDataSlotEXT",
                ),
                name: "pPrivateDataSlot",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreatePrivateDataSlotEXT ( VkDevice  device , const  VkPrivateDataSlotCreateInfoEXT*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkPrivateDataSlotEXT*  pPrivateDataSlot );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroyPrivateDataSlotEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPrivateDataSlotEXT",
                ),
                name: "privateDataSlot",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroyPrivateDataSlotEXT ( VkDevice  device ,  VkPrivateDataSlotEXT  privateDataSlot , const  VkAllocationCallbacks*  pAllocator );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkSetPrivateDataEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkObjectType",
                ),
                name: "objectType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint64_t",
                ),
                name: "objectHandle",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPrivateDataSlotEXT",
                ),
                name: "privateDataSlot",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint64_t",
                ),
                name: "data",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkSetPrivateDataEXT ( VkDevice  device ,  VkObjectType  objectType ,  uint64_t  objectHandle ,  VkPrivateDataSlotEXT  privateDataSlot ,  uint64_t  data );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkGetPrivateDataEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkObjectType",
                ),
                name: "objectType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint64_t",
                ),
                name: "objectHandle",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPrivateDataSlotEXT",
                ),
                name: "privateDataSlot",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint64_t",
                ),
                name: "pData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkGetPrivateDataEXT ( VkDevice  device ,  VkObjectType  objectType ,  uint64_t  objectHandle ,  VkPrivateDataSlotEXT  privateDataSlot ,  uint64_t*  pData );",
}
Extension {
    name: "VK_EXT_queue_family_foreign",
    comment: None,
    number: Some(
        127,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Chad Versace @chadversary",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_memory",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_queue_family_foreign\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QUEUE_FAMILY_FOREIGN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_robustness2",
    comment: None,
    number: Some(
        287,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Liam Middlebrook @liam-middlebrook",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_ROBUSTNESS_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_ROBUSTNESS_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_robustness2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceRobustness2FeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceRobustness2PropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_sample_locations",
    comment: None,
    number: Some(
        144,
    ),
    protect: None,
    platform: None,
    author: Some(
        "AMD",
    ),
    contact: Some(
        "Daniel Rakos @drakos-amd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_sample_locations\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 12,
                            extends: Some(
                                "VkImageCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkSampleLocationEXT",
                    comment: None,
                },
                Type {
                    name: "VkSampleLocationsInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkAttachmentSampleLocationsEXT",
                    comment: None,
                },
                Type {
                    name: "VkSubpassSampleLocationsEXT",
                    comment: None,
                },
                Type {
                    name: "VkRenderPassSampleLocationsBeginInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineSampleLocationsStateCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceSampleLocationsPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkMultisamplePropertiesEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetSampleLocationsEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceMultisamplePropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetSampleLocationsEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSampleLocationsInfoEXT",
                ),
                name: "pSampleLocationsInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetSampleLocationsEXT ( VkCommandBuffer  commandBuffer , const  VkSampleLocationsInfoEXT*  pSampleLocationsInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkGetPhysicalDeviceMultisamplePropertiesEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSampleCountFlagBits",
                ),
                name: "samples",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMultisamplePropertiesEXT",
                ),
                name: "pMultisampleProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkGetPhysicalDeviceMultisamplePropertiesEXT ( VkPhysicalDevice  physicalDevice ,  VkSampleCountFlagBits  samples ,  VkMultisamplePropertiesEXT*  pMultisampleProperties );",
}
Extension {
    name: "VK_EXT_sampler_filter_minmax",
    comment: None,
    number: Some(
        131,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_sampler_filter_minmax\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE",
                            extends: Some(
                                "VkSamplerReductionMode",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_REDUCTION_MODE_MIN_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_REDUCTION_MODE_MIN",
                            extends: Some(
                                "VkSamplerReductionMode",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_REDUCTION_MODE_MAX_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_REDUCTION_MODE_MAX",
                            extends: Some(
                                "VkSamplerReductionMode",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkSamplerReductionModeEXT",
                    comment: None,
                },
                Type {
                    name: "VkSamplerReductionModeCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_scalar_block_layout",
    comment: None,
    number: Some(
        222,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Tobias Hector @tobski",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_scalar_block_layout\"",
                            extends: None,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_separate_stencil_usage",
    comment: None,
    number: Some(
        247,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Daniel Rakos @drakos-amd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_separate_stencil_usage\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkImageStencilUsageCreateInfoEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_shader_atomic_float",
    comment: None,
    number: Some(
        261,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Vikram Kushwaha @vkushwaha-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_shader_atomic_float\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_shader_demote_to_helper_invocation",
    comment: None,
    number: Some(
        277,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_shader_demote_to_helper_invocation\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_shader_image_atomic_int64",
    comment: None,
    number: Some(
        235,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Tobias Hector @tobski",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_shader_image_atomic_int64\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_shader_stencil_export",
    comment: None,
    number: Some(
        141,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Dominik Witczak @dominikwitczakamd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_shader_stencil_export\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_shader_subgroup_ballot",
    comment: None,
    number: Some(
        65,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_VERSION_1_2",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_shader_subgroup_ballot\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_shader_subgroup_vote",
    comment: None,
    number: Some(
        66,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_VERSION_1_1",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_shader_subgroup_vote\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_shader_viewport_index_layer",
    comment: None,
    number: Some(
        163,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_shader_viewport_index_layer\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_subgroup_size_control",
    comment: None,
    number: Some(
        226,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Neil Henning @sheredom",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_subgroup_size_control\"",
                            extends: None,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceSubgroupSizeControlFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceSubgroupSizeControlPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 0,
                            extends: Some(
                                "VkPipelineShaderStageCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 1,
                            extends: Some(
                                "VkPipelineShaderStageCreateFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_swapchain_colorspace",
    comment: None,
    number: Some(
        105,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Courtney Goeltzenleuchter @courtney-g",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "4",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_swapchain_colorspace\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_BT709_LINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_BT709_NONLINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_BT2020_LINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_HDR10_ST2084_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 8,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_DOLBYVISION_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 9,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_HDR10_HLG_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 10,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 11,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 12,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_PASS_THROUGH_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 13,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 14,
                            extends: "VkColorSpaceKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT",
                        comment: Some(
                            "Deprecated name for backwards compatibility",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT",
                            extends: Some(
                                "VkColorSpaceKHR",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_texel_buffer_alignment",
    comment: None,
    number: Some(
        282,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_texel_buffer_alignment\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_texture_compression_astc_hdr",
    comment: None,
    number: Some(
        67,
    ),
    protect: None,
    platform: None,
    author: Some(
        "ARM",
    ),
    contact: Some(
        "Jan-Harald Fredriksen @janharaldfredriksen-arm",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_texture_compression_astc_hdr\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 8,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 9,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 10,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 11,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 12,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 13,
                            extends: "VkFormat",
                            extnumber: Some(
                                67,
                            ),
                            dir: true,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_tooling_info",
    comment: None,
    number: Some(
        246,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Tobias Hector @tobski",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_TOOLING_INFO_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_TOOLING_INFO_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_tooling_info\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkToolPurposeFlagBitsEXT",
                    comment: None,
                },
                Type {
                    name: "VkToolPurposeFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceToolPropertiesEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceToolPropertiesEXT",
                    comment: None,
                },
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_EXT_debug_report",
            ),
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 5,
                            extends: Some(
                                "VkToolPurposeFlagBitsEXT",
                            ),
                        },
                    },
                ),
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_EXT_debug_marker",
            ),
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 6,
                            extends: Some(
                                "VkToolPurposeFlagBitsEXT",
                            ),
                        },
                    },
                ),
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_EXT_debug_utils",
            ),
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 5,
                            extends: Some(
                                "VkToolPurposeFlagBitsEXT",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 6,
                            extends: Some(
                                "VkToolPurposeFlagBitsEXT",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceToolPropertiesEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pToolCount",
            },
        },
        CommandParam {
            len: Some(
                "pToolCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDeviceToolPropertiesEXT",
                ),
                name: "pToolProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceToolPropertiesEXT ( VkPhysicalDevice  physicalDevice ,  uint32_t*  pToolCount ,  VkPhysicalDeviceToolPropertiesEXT*  pToolProperties );",
}
Extension {
    name: "VK_EXT_transform_feedback",
    comment: None,
    number: Some(
        29,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "glemulation,d3demulation,devtools",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_transform_feedback\"",
                            extends: None,
                        },
                    },
                ),
                Command {
                    name: "vkCmdBindTransformFeedbackBuffersEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdBeginTransformFeedbackEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdEndTransformFeedbackEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdBeginQueryIndexedEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdEndQueryIndexedEXT",
                    comment: None,
                },
                Command {
                    name: "vkCmdDrawIndirectByteCountEXT",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkQueryType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 11,
                            extends: Some(
                                "VkBufferUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 12,
                            extends: Some(
                                "VkBufferUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 25,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 26,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 27,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 24,
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceTransformFeedbackFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceTransformFeedbackPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineRasterizationStateStreamCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineRasterizationStateStreamCreateFlagsEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBindTransformFeedbackBuffersEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstBinding",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "bindingCount",
            },
        },
        CommandParam {
            len: Some(
                "bindingCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "pBuffers",
            },
        },
        CommandParam {
            len: Some(
                "bindingCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "pOffsets",
            },
        },
        CommandParam {
            len: Some(
                "bindingCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: Some(
                "true",
            ),
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "pSizes",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBindTransformFeedbackBuffersEXT ( VkCommandBuffer  commandBuffer ,  uint32_t  firstBinding ,  uint32_t  bindingCount , const  VkBuffer*  pBuffers , const  VkDeviceSize*  pOffsets , const  VkDeviceSize*  pSizes );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "inside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBeginTransformFeedbackEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstCounterBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "counterBufferCount",
            },
        },
        CommandParam {
            len: Some(
                "counterBufferCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: Some(
                "true",
            ),
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "pCounterBuffers",
            },
        },
        CommandParam {
            len: Some(
                "counterBufferCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "pCounterBufferOffsets",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBeginTransformFeedbackEXT ( VkCommandBuffer  commandBuffer ,  uint32_t  firstCounterBuffer ,  uint32_t  counterBufferCount , const  VkBuffer*  pCounterBuffers , const  VkDeviceSize*  pCounterBufferOffsets );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "inside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdEndTransformFeedbackEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstCounterBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "counterBufferCount",
            },
        },
        CommandParam {
            len: Some(
                "counterBufferCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: Some(
                "true",
            ),
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "pCounterBuffers",
            },
        },
        CommandParam {
            len: Some(
                "counterBufferCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "pCounterBufferOffsets",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdEndTransformFeedbackEXT ( VkCommandBuffer  commandBuffer ,  uint32_t  firstCounterBuffer ,  uint32_t  counterBufferCount , const  VkBuffer*  pCounterBuffers , const  VkDeviceSize*  pCounterBufferOffsets );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBeginQueryIndexedEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueryPool",
                ),
                name: "queryPool",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "query",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueryControlFlags",
                ),
                name: "flags",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "index",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBeginQueryIndexedEXT ( VkCommandBuffer  commandBuffer ,  VkQueryPool  queryPool ,  uint32_t  query ,  VkQueryControlFlags  flags ,  uint32_t  index );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdEndQueryIndexedEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueryPool",
                ),
                name: "queryPool",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "query",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "index",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdEndQueryIndexedEXT ( VkCommandBuffer  commandBuffer ,  VkQueryPool  queryPool ,  uint32_t  query ,  uint32_t  index );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "inside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "graphics",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdDrawIndirectByteCountEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "instanceCount",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstInstance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "counterBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "counterBufferOffset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "counterOffset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "vertexStride",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdDrawIndirectByteCountEXT ( VkCommandBuffer  commandBuffer ,  uint32_t  instanceCount ,  uint32_t  firstInstance ,  VkBuffer  counterBuffer ,  VkDeviceSize  counterBufferOffset ,  uint32_t  counterOffset ,  uint32_t  vertexStride );",
}
Extension {
    name: "VK_EXT_validation_cache",
    comment: None,
    number: Some(
        161,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Cort Stratton @cdwfs",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_VALIDATION_CACHE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_VALIDATION_CACHE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_validation_cache\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT",
                        comment: Some(
                            "VkValidationCacheEXT",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkValidationCacheEXT",
                    comment: None,
                },
                Type {
                    name: "VkValidationCacheCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkShaderModuleValidationCacheCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkValidationCacheHeaderVersionEXT",
                    comment: None,
                },
                Type {
                    name: "VkValidationCacheCreateFlagsEXT",
                    comment: None,
                },
                Command {
                    name: "vkCreateValidationCacheEXT",
                    comment: None,
                },
                Command {
                    name: "vkDestroyValidationCacheEXT",
                    comment: None,
                },
                Command {
                    name: "vkMergeValidationCachesEXT",
                    comment: None,
                },
                Command {
                    name: "vkGetValidationCacheDataEXT",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateValidationCacheEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkValidationCacheCreateInfoEXT",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkValidationCacheEXT",
                ),
                name: "pValidationCache",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateValidationCacheEXT ( VkDevice  device , const  VkValidationCacheCreateInfoEXT*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkValidationCacheEXT*  pValidationCache );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroyValidationCacheEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkValidationCacheEXT",
                ),
                name: "validationCache",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroyValidationCacheEXT ( VkDevice  device ,  VkValidationCacheEXT  validationCache , const  VkAllocationCallbacks*  pAllocator );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkMergeValidationCachesEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkValidationCacheEXT",
                ),
                name: "dstCache",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "srcCacheCount",
            },
        },
        CommandParam {
            len: Some(
                "srcCacheCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkValidationCacheEXT",
                ),
                name: "pSrcCaches",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkMergeValidationCachesEXT ( VkDevice  device ,  VkValidationCacheEXT  dstCache ,  uint32_t  srcCacheCount , const  VkValidationCacheEXT*  pSrcCaches );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetValidationCacheDataEXT",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkValidationCacheEXT",
                ),
                name: "validationCache",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "size_t",
                ),
                name: "pDataSize",
            },
        },
        CommandParam {
            len: Some(
                "pDataSize",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetValidationCacheDataEXT ( VkDevice  device ,  VkValidationCacheEXT  validationCache ,  size_t*  pDataSize ,  void*  pData );",
}
Extension {
    name: "VK_EXT_validation_features",
    comment: None,
    number: Some(
        248,
    ),
    protect: None,
    platform: None,
    author: Some(
        "LUNARG",
    ),
    contact: Some(
        "Karl Schultz @karl-lunarg",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "debugging",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_VALIDATION_FEATURES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "4",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_validation_features\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkValidationFeaturesEXT",
                    comment: None,
                },
                Type {
                    name: "VkValidationFeatureEnableEXT",
                    comment: None,
                },
                Type {
                    name: "VkValidationFeatureDisableEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_validation_flags",
    comment: None,
    number: Some(
        62,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Tobin Ehlis @tobine",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_EXT_validation_features",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "debugging",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_VALIDATION_FLAGS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_validation_flags\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkValidationFlagsEXT",
                    comment: None,
                },
                Type {
                    name: "VkValidationCheckEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_vertex_attribute_divisor",
    comment: None,
    number: Some(
        191,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Vikram Kushwaha @vkushwaha",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_vertex_attribute_divisor\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT",
                    comment: None,
                },
                Type {
                    name: "VkVertexInputBindingDivisorDescriptionEXT",
                    comment: None,
                },
                Type {
                    name: "VkPipelineVertexInputDivisorStateCreateInfoEXT",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_EXT_ycbcr_image_arrays",
    comment: None,
    number: Some(
        253,
    ),
    protect: None,
    platform: None,
    author: Some(
        "EXT",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_sampler_ycbcr_conversion",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_EXT_ycbcr_image_arrays\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_FUCHSIA_imagepipe_surface",
    comment: None,
    number: Some(
        215,
    ),
    protect: None,
    platform: Some(
        "fuchsia",
    ),
    author: Some(
        "FUCHSIA",
    ),
    contact: Some(
        "Craig Stout @cdotstout",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_FUCHSIA_imagepipe_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImagePipeSurfaceCreateFlagsFUCHSIA",
                    comment: None,
                },
                Type {
                    name: "VkImagePipeSurfaceCreateInfoFUCHSIA",
                    comment: None,
                },
                Command {
                    name: "vkCreateImagePipeSurfaceFUCHSIA",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateImagePipeSurfaceFUCHSIA",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImagePipeSurfaceCreateInfoFUCHSIA",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateImagePipeSurfaceFUCHSIA ( VkInstance  instance , const  VkImagePipeSurfaceCreateInfoFUCHSIA*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
Extension {
    name: "VK_GGP_frame_token",
    comment: None,
    number: Some(
        192,
    ),
    protect: None,
    platform: Some(
        "ggp",
    ),
    author: Some(
        "GGP",
    ),
    contact: Some(
        "Jean-Francois Roy @jfroy",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_swapchain,VK_GGP_stream_descriptor_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_GGP_FRAME_TOKEN_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GGP_FRAME_TOKEN_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_GGP_frame_token\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPresentFrameTokenGGP",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_GGP_stream_descriptor_surface",
    comment: None,
    number: Some(
        50,
    ),
    protect: None,
    platform: Some(
        "ggp",
    ),
    author: Some(
        "GGP",
    ),
    contact: Some(
        "Jean-Francois Roy @jfroy",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_GGP_stream_descriptor_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkStreamDescriptorSurfaceCreateFlagsGGP",
                    comment: None,
                },
                Type {
                    name: "VkStreamDescriptorSurfaceCreateInfoGGP",
                    comment: None,
                },
                Command {
                    name: "vkCreateStreamDescriptorSurfaceGGP",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateStreamDescriptorSurfaceGGP",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStreamDescriptorSurfaceCreateInfoGGP",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateStreamDescriptorSurfaceGGP ( VkInstance  instance , const  VkStreamDescriptorSurfaceCreateInfoGGP*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
Extension {
    name: "VK_GOOGLE_decorate_string",
    comment: None,
    number: Some(
        225,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Hai Nguyen @chaoticbob",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_GOOGLE_DECORATE_STRING_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_GOOGLE_decorate_string\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_GOOGLE_display_timing",
    comment: None,
    number: Some(
        93,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Ian Elliott @ianelliottus",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_swapchain",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_GOOGLE_display_timing\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkRefreshCycleDurationGOOGLE",
                    comment: None,
                },
                Type {
                    name: "VkPastPresentationTimingGOOGLE",
                    comment: None,
                },
                Type {
                    name: "VkPresentTimesInfoGOOGLE",
                    comment: None,
                },
                Type {
                    name: "VkPresentTimeGOOGLE",
                    comment: None,
                },
                Command {
                    name: "vkGetRefreshCycleDurationGOOGLE",
                    comment: None,
                },
                Command {
                    name: "vkGetPastPresentationTimingGOOGLE",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetRefreshCycleDurationGOOGLE",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapchain",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkRefreshCycleDurationGOOGLE",
                ),
                name: "pDisplayTimingProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetRefreshCycleDurationGOOGLE ( VkDevice  device ,  VkSwapchainKHR  swapchain ,  VkRefreshCycleDurationGOOGLE*  pDisplayTimingProperties );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPastPresentationTimingGOOGLE",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapchain",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPresentationTimingCount",
            },
        },
        CommandParam {
            len: Some(
                "pPresentationTimingCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPastPresentationTimingGOOGLE",
                ),
                name: "pPresentationTimings",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPastPresentationTimingGOOGLE ( VkDevice  device ,  VkSwapchainKHR  swapchain ,  uint32_t*  pPresentationTimingCount ,  VkPastPresentationTimingGOOGLE*  pPresentationTimings );",
}
Extension {
    name: "VK_GOOGLE_hlsl_functionality1",
    comment: None,
    number: Some(
        224,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Hai Nguyen @chaoticbob",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_GOOGLE_hlsl_functionality1\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_GOOGLE_user_type",
    comment: None,
    number: Some(
        290,
    ),
    protect: None,
    platform: None,
    author: Some(
        "GOOGLE",
    ),
    contact: Some(
        "Kaye Mason @chaleur",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_GOOGLE_USER_TYPE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GOOGLE_USER_TYPE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_GOOGLE_user_type\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_IMG_filter_cubic",
    comment: None,
    number: Some(
        16,
    ),
    protect: None,
    platform: None,
    author: Some(
        "IMG",
    ),
    contact: Some(
        "Tobias Hector @tobski",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_IMG_FILTER_CUBIC_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMG_FILTER_CUBIC_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_IMG_filter_cubic\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FILTER_CUBIC_IMG",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkFilter",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG",
                        comment: Some(
                            "Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 13,
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_IMG_format_pvrtc",
    comment: None,
    number: Some(
        55,
    ),
    protect: None,
    platform: None,
    author: Some(
        "IMG",
    ),
    contact: Some(
        "Stuart Smith",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_IMG_FORMAT_PVRTC_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMG_FORMAT_PVRTC_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_IMG_format_pvrtc\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkFormat",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_INTEL_performance_query",
    comment: None,
    number: Some(
        211,
    ),
    protect: None,
    platform: None,
    author: Some(
        "INTEL",
    ),
    contact: Some(
        "Lionel Landwerlin @llandwerlin",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "devtools",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_INTEL_performance_query\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL",
                        comment: Some(
                            "Backwards-compatible alias",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkQueryType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPerformanceConfigurationTypeINTEL",
                    comment: None,
                },
                Type {
                    name: "VkQueryPoolSamplingModeINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceOverrideTypeINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceParameterTypeINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceValueTypeINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceValueDataINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceValueINTEL",
                    comment: None,
                },
                Type {
                    name: "VkInitializePerformanceApiInfoINTEL",
                    comment: None,
                },
                Type {
                    name: "VkQueryPoolCreateInfoINTEL",
                    comment: None,
                },
                Type {
                    name: "VkQueryPoolPerformanceQueryCreateInfoINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceMarkerInfoINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceStreamMarkerInfoINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceOverrideInfoINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceConfigurationAcquireInfoINTEL",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceConfigurationINTEL",
                    comment: None,
                },
                Command {
                    name: "vkInitializePerformanceApiINTEL",
                    comment: None,
                },
                Command {
                    name: "vkUninitializePerformanceApiINTEL",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetPerformanceMarkerINTEL",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetPerformanceStreamMarkerINTEL",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetPerformanceOverrideINTEL",
                    comment: None,
                },
                Command {
                    name: "vkAcquirePerformanceConfigurationINTEL",
                    comment: None,
                },
                Command {
                    name: "vkReleasePerformanceConfigurationINTEL",
                    comment: None,
                },
                Command {
                    name: "vkQueueSetPerformanceConfigurationINTEL",
                    comment: None,
                },
                Command {
                    name: "vkGetPerformanceParameterINTEL",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkInitializePerformanceApiINTEL",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInitializePerformanceApiInfoINTEL",
                ),
                name: "pInitializeInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkInitializePerformanceApiINTEL ( VkDevice  device , const  VkInitializePerformanceApiInfoINTEL*  pInitializeInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkUninitializePerformanceApiINTEL",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkUninitializePerformanceApiINTEL ( VkDevice  device );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute,transfer",
    ),
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCmdSetPerformanceMarkerINTEL",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceMarkerInfoINTEL",
                ),
                name: "pMarkerInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCmdSetPerformanceMarkerINTEL ( VkCommandBuffer  commandBuffer , const  VkPerformanceMarkerInfoINTEL*  pMarkerInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute,transfer",
    ),
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCmdSetPerformanceStreamMarkerINTEL",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceStreamMarkerInfoINTEL",
                ),
                name: "pMarkerInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCmdSetPerformanceStreamMarkerINTEL ( VkCommandBuffer  commandBuffer , const  VkPerformanceStreamMarkerInfoINTEL*  pMarkerInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute,transfer",
    ),
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCmdSetPerformanceOverrideINTEL",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceOverrideInfoINTEL",
                ),
                name: "pOverrideInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCmdSetPerformanceOverrideINTEL ( VkCommandBuffer  commandBuffer , const  VkPerformanceOverrideInfoINTEL*  pOverrideInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkAcquirePerformanceConfigurationINTEL",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceConfigurationAcquireInfoINTEL",
                ),
                name: "pAcquireInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceConfigurationINTEL",
                ),
                name: "pConfiguration",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkAcquirePerformanceConfigurationINTEL ( VkDevice  device , const  VkPerformanceConfigurationAcquireInfoINTEL*  pAcquireInfo ,  VkPerformanceConfigurationINTEL*  pConfiguration );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkReleasePerformanceConfigurationINTEL",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceConfigurationINTEL",
                ),
                name: "configuration",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkReleasePerformanceConfigurationINTEL ( VkDevice  device ,  VkPerformanceConfigurationINTEL  configuration );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkQueueSetPerformanceConfigurationINTEL",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueue",
                ),
                name: "queue",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceConfigurationINTEL",
                ),
                name: "configuration",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkQueueSetPerformanceConfigurationINTEL ( VkQueue  queue ,  VkPerformanceConfigurationINTEL  configuration );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPerformanceParameterINTEL",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceParameterTypeINTEL",
                ),
                name: "parameter",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceValueINTEL",
                ),
                name: "pValue",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPerformanceParameterINTEL ( VkDevice  device ,  VkPerformanceParameterTypeINTEL  parameter ,  VkPerformanceValueINTEL*  pValue );",
}
Extension {
    name: "VK_INTEL_shader_integer_functions2",
    comment: None,
    number: Some(
        210,
    ),
    protect: None,
    platform: None,
    author: Some(
        "INTEL",
    ),
    contact: Some(
        "Ian Romanick @ianromanick",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_INTEL_shader_integer_functions2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_16bit_storage",
    comment: None,
    number: Some(
        84,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jan-Harald Fredriksen @janharaldfredriksen-arm",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2,VK_KHR_storage_buffer_storage_class",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_16BIT_STORAGE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_16BIT_STORAGE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_16bit_storage\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevice16BitStorageFeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_8bit_storage",
    comment: None,
    number: Some(
        178,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Alexander Galazin @alegal-arm",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2,VK_KHR_storage_buffer_storage_class",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_8BIT_STORAGE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_8BIT_STORAGE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_8bit_storage\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevice8BitStorageFeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_acceleration_structure",
    comment: None,
    number: Some(
        151,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_EXT_descriptor_indexing,VK_KHR_buffer_device_address,VK_KHR_deferred_host_operations",
    ),
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: Some(
        1,
    ),
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "11",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_acceleration_structure\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 9,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 10,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 11,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 12,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 13,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 14,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 17,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 20,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 25,
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDescriptorType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 21,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 22,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkQueryType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkQueryType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDebugReportObjectTypeEXT",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_INDEX_TYPE_NONE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkIndexType",
                            extnumber: Some(
                                166,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 29,
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 19,
                            extends: Some(
                                "VkBufferUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 20,
                            extends: Some(
                                "VkBufferUsageFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkAccelerationStructureTypeKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceOrHostAddressKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceOrHostAddressConstKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureBuildRangeInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkAabbPositionsKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureGeometryTrianglesDataKHR",
                    comment: None,
                },
                Type {
                    name: "VkTransformMatrixKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureBuildGeometryInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureBuildTypeKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureGeometryAabbsDataKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureInstanceKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureGeometryInstancesDataKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureGeometryDataKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureGeometryKHR",
                    comment: None,
                },
                Type {
                    name: "VkGeometryFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkGeometryInstanceFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkGeometryFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkGeometryInstanceFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureKHR",
                    comment: None,
                },
                Type {
                    name: "VkBuildAccelerationStructureFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkBuildAccelerationStructureFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkCopyAccelerationStructureModeKHR",
                    comment: None,
                },
                Type {
                    name: "VkGeometryTypeKHR",
                    comment: None,
                },
                Type {
                    name: "VkWriteDescriptorSetAccelerationStructureKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceAccelerationStructureFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceAccelerationStructurePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureDeviceAddressInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureVersionInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkCopyAccelerationStructureToMemoryInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkCopyMemoryToAccelerationStructureInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkCopyAccelerationStructureInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureCompatibilityKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureCreateFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkBuildAccelerationStructureModeKHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureBuildSizesInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateAccelerationStructureKHR",
                    comment: None,
                },
                Command {
                    name: "vkDestroyAccelerationStructureKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdBuildAccelerationStructuresKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdBuildAccelerationStructuresIndirectKHR",
                    comment: None,
                },
                Command {
                    name: "vkBuildAccelerationStructuresKHR",
                    comment: None,
                },
                Command {
                    name: "vkCopyAccelerationStructureKHR",
                    comment: None,
                },
                Command {
                    name: "vkCopyAccelerationStructureToMemoryKHR",
                    comment: None,
                },
                Command {
                    name: "vkCopyMemoryToAccelerationStructureKHR",
                    comment: None,
                },
                Command {
                    name: "vkWriteAccelerationStructuresPropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdCopyAccelerationStructureKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdCopyAccelerationStructureToMemoryKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdCopyMemoryToAccelerationStructureKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetAccelerationStructureDeviceAddressKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdWriteAccelerationStructuresPropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDeviceAccelerationStructureCompatibilityKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetAccelerationStructureBuildSizesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateAccelerationStructureKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureCreateInfoKHR",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureKHR",
                ),
                name: "pAccelerationStructure",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateAccelerationStructureKHR ( VkDevice                                            device , const  VkAccelerationStructureCreateInfoKHR*         pCreateInfo , const  VkAllocationCallbacks*        pAllocator ,  VkAccelerationStructureKHR*                         pAccelerationStructure );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroyAccelerationStructureKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureKHR",
                ),
                name: "accelerationStructure",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroyAccelerationStructureKHR ( VkDevice  device ,  VkAccelerationStructureKHR  accelerationStructure , const  VkAllocationCallbacks*  pAllocator );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBuildAccelerationStructuresKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "infoCount",
            },
        },
        CommandParam {
            len: Some(
                "infoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureBuildGeometryInfoKHR",
                ),
                name: "pInfos",
            },
        },
        CommandParam {
            len: Some(
                "infoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureBuildRangeInfoKHR",
                ),
                name: "ppBuildRangeInfos",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBuildAccelerationStructuresKHR ( VkCommandBuffer                                     commandBuffer ,  uint32_t  infoCount , const  VkAccelerationStructureBuildGeometryInfoKHR*  pInfos , const  VkAccelerationStructureBuildRangeInfoKHR* const*  ppBuildRangeInfos );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBuildAccelerationStructuresIndirectKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "infoCount",
            },
        },
        CommandParam {
            len: Some(
                "infoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureBuildGeometryInfoKHR",
                ),
                name: "pInfos",
            },
        },
        CommandParam {
            len: Some(
                "infoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceAddress",
                ),
                name: "pIndirectDeviceAddresses",
            },
        },
        CommandParam {
            len: Some(
                "infoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pIndirectStrides",
            },
        },
        CommandParam {
            len: Some(
                "infoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "ppMaxPrimitiveCounts",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBuildAccelerationStructuresIndirectKHR ( VkCommandBuffer                   commandBuffer ,  uint32_t                                            infoCount , const  VkAccelerationStructureBuildGeometryInfoKHR*  pInfos , const  VkDeviceAddress*              pIndirectDeviceAddresses , const  uint32_t*                     pIndirectStrides , const  uint32_t* const*              ppMaxPrimitiveCounts );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkBuildAccelerationStructuresKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "deferredOperation",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "infoCount",
            },
        },
        CommandParam {
            len: Some(
                "infoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureBuildGeometryInfoKHR",
                ),
                name: "pInfos",
            },
        },
        CommandParam {
            len: Some(
                "infoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureBuildRangeInfoKHR",
                ),
                name: "ppBuildRangeInfos",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkBuildAccelerationStructuresKHR ( VkDevice                                            device ,  VkDeferredOperationKHR  deferredOperation ,  uint32_t  infoCount , const  VkAccelerationStructureBuildGeometryInfoKHR*  pInfos , const  VkAccelerationStructureBuildRangeInfoKHR* const*  ppBuildRangeInfos );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCopyAccelerationStructureKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "deferredOperation",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyAccelerationStructureInfoKHR",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCopyAccelerationStructureKHR ( VkDevice  device ,  VkDeferredOperationKHR  deferredOperation , const  VkCopyAccelerationStructureInfoKHR*  pInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCopyAccelerationStructureToMemoryKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "deferredOperation",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyAccelerationStructureToMemoryInfoKHR",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCopyAccelerationStructureToMemoryKHR ( VkDevice  device ,  VkDeferredOperationKHR  deferredOperation , const  VkCopyAccelerationStructureToMemoryInfoKHR*  pInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCopyMemoryToAccelerationStructureKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "deferredOperation",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyMemoryToAccelerationStructureInfoKHR",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCopyMemoryToAccelerationStructureKHR ( VkDevice  device ,  VkDeferredOperationKHR  deferredOperation , const  VkCopyMemoryToAccelerationStructureInfoKHR*  pInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkWriteAccelerationStructuresPropertiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "accelerationStructureCount",
            },
        },
        CommandParam {
            len: Some(
                "accelerationStructureCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureKHR",
                ),
                name: "pAccelerationStructures",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueryType",
                ),
                name: "queryType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "size_t",
                ),
                name: "dataSize",
            },
        },
        CommandParam {
            len: Some(
                "dataSize",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pData",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "size_t",
                ),
                name: "stride",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkWriteAccelerationStructuresPropertiesKHR ( VkDevice  device ,  uint32_t  accelerationStructureCount , const  VkAccelerationStructureKHR*  pAccelerationStructures ,  VkQueryType   queryType ,  size_t        dataSize ,  void*  pData ,  size_t  stride );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdCopyAccelerationStructureKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyAccelerationStructureInfoKHR",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdCopyAccelerationStructureKHR ( VkCommandBuffer  commandBuffer , const  VkCopyAccelerationStructureInfoKHR*  pInfo );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdCopyAccelerationStructureToMemoryKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyAccelerationStructureToMemoryInfoKHR",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdCopyAccelerationStructureToMemoryKHR ( VkCommandBuffer  commandBuffer , const  VkCopyAccelerationStructureToMemoryInfoKHR*  pInfo );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdCopyMemoryToAccelerationStructureKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyMemoryToAccelerationStructureInfoKHR",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdCopyMemoryToAccelerationStructureKHR ( VkCommandBuffer  commandBuffer , const  VkCopyMemoryToAccelerationStructureInfoKHR*  pInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkDeviceAddress",
        ),
        name: "vkGetAccelerationStructureDeviceAddressKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureDeviceAddressInfoKHR",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkDeviceAddress  vkGetAccelerationStructureDeviceAddressKHR ( VkDevice  device , const  VkAccelerationStructureDeviceAddressInfoKHR*  pInfo );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdWriteAccelerationStructuresPropertiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "accelerationStructureCount",
            },
        },
        CommandParam {
            len: Some(
                "accelerationStructureCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureKHR",
                ),
                name: "pAccelerationStructures",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueryType",
                ),
                name: "queryType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueryPool",
                ),
                name: "queryPool",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstQuery",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdWriteAccelerationStructuresPropertiesKHR ( VkCommandBuffer  commandBuffer ,  uint32_t  accelerationStructureCount , const  VkAccelerationStructureKHR*  pAccelerationStructures ,  VkQueryType  queryType ,  VkQueryPool  queryPool ,  uint32_t  firstQuery );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkGetDeviceAccelerationStructureCompatibilityKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureVersionInfoKHR",
                ),
                name: "pVersionInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureCompatibilityKHR",
                ),
                name: "pCompatibility",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkGetDeviceAccelerationStructureCompatibilityKHR ( VkDevice  device , const  VkAccelerationStructureVersionInfoKHR*  pVersionInfo ,  VkAccelerationStructureCompatibilityKHR*  pCompatibility );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkGetAccelerationStructureBuildSizesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureBuildTypeKHR",
                ),
                name: "buildType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureBuildGeometryInfoKHR",
                ),
                name: "pBuildInfo",
            },
        },
        CommandParam {
            len: Some(
                "pBuildInfo->geometryCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pMaxPrimitiveCounts",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureBuildSizesInfoKHR",
                ),
                name: "pSizeInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkGetAccelerationStructureBuildSizesKHR ( VkDevice                                             device ,  VkAccelerationStructureBuildTypeKHR                  buildType , const  VkAccelerationStructureBuildGeometryInfoKHR*   pBuildInfo , const  uint32_t*   pMaxPrimitiveCounts ,  VkAccelerationStructureBuildSizesInfoKHR*            pSizeInfo );",
}
Extension {
    name: "VK_KHR_android_surface",
    comment: None,
    number: Some(
        9,
    ),
    protect: None,
    platform: Some(
        "android",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_ANDROID_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "6",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_ANDROID_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_android_surface\"",
                            extends: None,
                        },
                    },
                ),
                Type {
                    name: "ANativeWindow",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkAndroidSurfaceCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkAndroidSurfaceCreateInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateAndroidSurfaceKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateAndroidSurfaceKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAndroidSurfaceCreateInfoKHR",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateAndroidSurfaceKHR ( VkInstance  instance , const  VkAndroidSurfaceCreateInfoKHR*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
Extension {
    name: "VK_KHR_bind_memory2",
    comment: None,
    number: Some(
        158,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Tobias Hector @tobski",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_BIND_MEMORY_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_BIND_MEMORY_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_bind_memory2\"",
                            extends: None,
                        },
                    },
                ),
                Command {
                    name: "vkBindBufferMemory2KHR",
                    comment: None,
                },
                Command {
                    name: "vkBindImageMemory2KHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_CREATE_ALIAS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_CREATE_ALIAS_BIT",
                            extends: Some(
                                "VkImageCreateFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkBindBufferMemoryInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkBindImageMemoryInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_buffer_device_address",
    comment: None,
    number: Some(
        258,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_buffer_device_address\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT",
                            extends: Some(
                                "VkBufferUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",
                            extends: Some(
                                "VkBufferCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT",
                            extends: Some(
                                "VkMemoryAllocateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",
                            extends: Some(
                                "VkMemoryAllocateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS",
                            extends: Some(
                                "VkResult",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceBufferDeviceAddressFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkBufferDeviceAddressInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkBufferOpaqueCaptureAddressCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkMemoryOpaqueCaptureAddressAllocateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceMemoryOpaqueCaptureAddressInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetBufferDeviceAddressKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetBufferOpaqueCaptureAddressKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDeviceMemoryOpaqueCaptureAddressKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_copy_commands2",
    comment: None,
    number: Some(
        338,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jeff Leger @jackohound",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_COPY_COMMANDS_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_copy_commands2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 8,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 9,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 10,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkCopyBufferInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkCopyImageInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkCopyBufferToImageInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkCopyImageToBufferInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkBlitImageInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkResolveImageInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkBufferCopy2KHR",
                    comment: None,
                },
                Type {
                    name: "VkImageCopy2KHR",
                    comment: None,
                },
                Type {
                    name: "VkImageBlit2KHR",
                    comment: None,
                },
                Type {
                    name: "VkBufferImageCopy2KHR",
                    comment: None,
                },
                Type {
                    name: "VkImageResolve2KHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdCopyBuffer2KHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdCopyImage2KHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdCopyBufferToImage2KHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdCopyImageToBuffer2KHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdBlitImage2KHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdResolveImage2KHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "transfer,graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "transfer",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdCopyBuffer2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyBufferInfo2KHR",
                ),
                name: "pCopyBufferInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdCopyBuffer2KHR ( VkCommandBuffer  commandBuffer , const  VkCopyBufferInfo2KHR*  pCopyBufferInfo );",
}
CommandDefinition {
    queues: Some(
        "transfer,graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "transfer",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdCopyImage2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyImageInfo2KHR",
                ),
                name: "pCopyImageInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdCopyImage2KHR ( VkCommandBuffer  commandBuffer , const  VkCopyImageInfo2KHR*  pCopyImageInfo );",
}
CommandDefinition {
    queues: Some(
        "transfer,graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "transfer",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdCopyBufferToImage2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyBufferToImageInfo2KHR",
                ),
                name: "pCopyBufferToImageInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdCopyBufferToImage2KHR ( VkCommandBuffer  commandBuffer , const  VkCopyBufferToImageInfo2KHR*  pCopyBufferToImageInfo );",
}
CommandDefinition {
    queues: Some(
        "transfer,graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "transfer",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdCopyImageToBuffer2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyImageToBufferInfo2KHR",
                ),
                name: "pCopyImageToBufferInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdCopyImageToBuffer2KHR ( VkCommandBuffer  commandBuffer , const  VkCopyImageToBufferInfo2KHR*  pCopyImageToBufferInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "transfer",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBlitImage2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBlitImageInfo2KHR",
                ),
                name: "pBlitImageInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBlitImage2KHR ( VkCommandBuffer  commandBuffer , const  VkBlitImageInfo2KHR*  pBlitImageInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "transfer",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdResolveImage2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkResolveImageInfo2KHR",
                ),
                name: "pResolveImageInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdResolveImage2KHR ( VkCommandBuffer  commandBuffer , const  VkResolveImageInfo2KHR*  pResolveImageInfo );",
}
Extension {
    name: "VK_KHR_create_renderpass2",
    comment: None,
    number: Some(
        110,
    ),
    protect: None,
    platform: None,
    author: None,
    contact: Some(
        "Tobias Hector @tobias",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_multiview,VK_KHR_maintenance2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_create_renderpass2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SUBPASS_END_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Command {
                    name: "vkCreateRenderPass2KHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdBeginRenderPass2KHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdNextSubpass2KHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdEndRenderPass2KHR",
                    comment: None,
                },
                Type {
                    name: "VkRenderPassCreateInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkAttachmentDescription2KHR",
                    comment: None,
                },
                Type {
                    name: "VkAttachmentReference2KHR",
                    comment: None,
                },
                Type {
                    name: "VkSubpassDescription2KHR",
                    comment: None,
                },
                Type {
                    name: "VkSubpassDependency2KHR",
                    comment: None,
                },
                Type {
                    name: "VkSubpassBeginInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkSubpassEndInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_dedicated_allocation",
    comment: None,
    number: Some(
        128,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_memory_requirements2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_dedicated_allocation\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkMemoryDedicatedRequirementsKHR",
                    comment: None,
                },
                Type {
                    name: "VkMemoryDedicatedAllocateInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_deferred_host_operations",
    comment: None,
    number: Some(
        269,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Josh Barczak @jbarczak",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "4",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_deferred_host_operations\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDeferredOperationKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateDeferredOperationKHR",
                    comment: None,
                },
                Command {
                    name: "vkDestroyDeferredOperationKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDeferredOperationMaxConcurrencyKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDeferredOperationResultKHR",
                    comment: None,
                },
                Command {
                    name: "vkDeferredOperationJoinKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_THREAD_IDLE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkResult",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_THREAD_DONE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkResult",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OPERATION_DEFERRED_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkResult",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OPERATION_NOT_DEFERRED_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkResult",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateDeferredOperationKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "pDeferredOperation",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateDeferredOperationKHR ( VkDevice  device , const  VkAllocationCallbacks*  pAllocator ,  VkDeferredOperationKHR*  pDeferredOperation );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroyDeferredOperationKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "operation",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroyDeferredOperationKHR ( VkDevice  device ,  VkDeferredOperationKHR  operation , const  VkAllocationCallbacks*  pAllocator );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "uint32_t",
        ),
        name: "vkGetDeferredOperationMaxConcurrencyKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "operation",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " uint32_t  vkGetDeferredOperationMaxConcurrencyKHR ( VkDevice  device ,  VkDeferredOperationKHR  operation );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_NOT_READY",
    ),
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDeferredOperationResultKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "operation",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDeferredOperationResultKHR ( VkDevice  device ,  VkDeferredOperationKHR  operation );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_THREAD_DONE_KHR,VK_THREAD_IDLE_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkDeferredOperationJoinKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "operation",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkDeferredOperationJoinKHR ( VkDevice  device ,  VkDeferredOperationKHR  operation );",
}
Extension {
    name: "VK_KHR_depth_stencil_resolve",
    comment: None,
    number: Some(
        200,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jan-Harald Fredriksen @janharald",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_create_renderpass2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_depth_stencil_resolve\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkSubpassDescriptionDepthStencilResolveKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceDepthStencilResolvePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkResolveModeFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkResolveModeFlagsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_RESOLVE_MODE_NONE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_RESOLVE_MODE_NONE",
                            extends: Some(
                                "VkResolveModeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT",
                            extends: Some(
                                "VkResolveModeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_RESOLVE_MODE_AVERAGE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_RESOLVE_MODE_AVERAGE_BIT",
                            extends: Some(
                                "VkResolveModeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_RESOLVE_MODE_MIN_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_RESOLVE_MODE_MIN_BIT",
                            extends: Some(
                                "VkResolveModeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_RESOLVE_MODE_MAX_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_RESOLVE_MODE_MAX_BIT",
                            extends: Some(
                                "VkResolveModeFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_descriptor_update_template",
    comment: None,
    number: Some(
        86,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Markus Tavenrath @mtavenrath",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_descriptor_update_template\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE",
                            extends: Some(
                                "VkObjectType",
                            ),
                        },
                    },
                ),
                Command {
                    name: "vkCreateDescriptorUpdateTemplateKHR",
                    comment: None,
                },
                Command {
                    name: "vkDestroyDescriptorUpdateTemplateKHR",
                    comment: None,
                },
                Command {
                    name: "vkUpdateDescriptorSetWithTemplateKHR",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorUpdateTemplateKHR",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorUpdateTemplateCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorUpdateTemplateTypeKHR",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorUpdateTemplateEntryKHR",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorUpdateTemplateCreateInfoKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET",
                            extends: Some(
                                "VkDescriptorUpdateTemplateType",
                            ),
                        },
                    },
                ),
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_KHR_push_descriptor",
            ),
            feature: None,
            comment: None,
            items: [
                Command {
                    name: "vkCmdPushDescriptorSetWithTemplateKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR",
                        comment: Some(
                            "Create descriptor update template for pushed descriptor updates",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: Some(
                                "VkDescriptorUpdateTemplateType",
                            ),
                        },
                    },
                ),
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_EXT_debug_report",
            ),
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT",
                            extends: Some(
                                "VkDebugReportObjectTypeEXT",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdPushDescriptorSetWithTemplateKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDescriptorUpdateTemplate",
                ),
                name: "descriptorUpdateTemplate",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineLayout",
                ),
                name: "layout",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "set",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: Some(
                "true",
            ),
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdPushDescriptorSetWithTemplateKHR ( VkCommandBuffer  commandBuffer ,  VkDescriptorUpdateTemplate  descriptorUpdateTemplate ,  VkPipelineLayout  layout ,  uint32_t  set , const  void*  pData );",
}
Extension {
    name: "VK_KHR_device_group",
    comment: None,
    number: Some(
        61,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_device_group_creation",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DEVICE_GROUP_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "4",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DEVICE_GROUP_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_device_group\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPeerMemoryFeatureFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkPeerMemoryFeatureFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT",
                            extends: Some(
                                "VkPeerMemoryFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT",
                            extends: Some(
                                "VkPeerMemoryFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT",
                            extends: Some(
                                "VkPeerMemoryFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT",
                            extends: Some(
                                "VkPeerMemoryFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkMemoryAllocateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkMemoryAllocateFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT",
                            extends: Some(
                                "VkMemoryAllocateFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkMemoryAllocateFlagsInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupRenderPassBeginInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupCommandBufferBeginInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupSubmitInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupBindSparseInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDeviceGroupPeerMemoryFeaturesKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetDeviceMaskKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdDispatchBaseKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT",
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_DISPATCH_BASE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PIPELINE_CREATE_DISPATCH_BASE",
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DEPENDENCY_DEVICE_GROUP_BIT",
                            extends: Some(
                                "VkDependencyFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_KHR_bind_memory2",
            ),
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkBindBufferMemoryDeviceGroupInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkBindImageMemoryDeviceGroupInfoKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT",
                            extends: Some(
                                "VkImageCreateFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_KHR_surface",
            ),
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDeviceGroupPresentModeFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupPresentModeFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupPresentCapabilitiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDeviceGroupPresentCapabilitiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDeviceGroupSurfacePresentModesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDevicePresentRectanglesKHR",
                    comment: None,
                },
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_KHR_swapchain",
            ),
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 8,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 9,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 10,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 11,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 12,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
                        comment: Some(
                            "Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 0,
                            extends: Some(
                                "VkSwapchainCreateFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkImageSwapchainCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkBindImageMemorySwapchainInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkAcquireNextImageInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupPresentInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupSwapchainCreateInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkAcquireNextImage2KHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDeviceGroupPresentCapabilitiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceGroupPresentCapabilitiesKHR",
                ),
                name: "pDeviceGroupPresentCapabilities",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDeviceGroupPresentCapabilitiesKHR ( VkDevice  device ,  VkDeviceGroupPresentCapabilitiesKHR*  pDeviceGroupPresentCapabilities );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDeviceGroupSurfacePresentModesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceGroupPresentModeFlagsKHR",
                ),
                name: "pModes",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDeviceGroupSurfacePresentModesKHR ( VkDevice  device ,  VkSurfaceKHR  surface ,  VkDeviceGroupPresentModeFlagsKHR*  pModes );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDevicePresentRectanglesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pRectCount",
            },
        },
        CommandParam {
            len: Some(
                "pRectCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkRect2D",
                ),
                name: "pRects",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDevicePresentRectanglesKHR ( VkPhysicalDevice  physicalDevice ,  VkSurfaceKHR  surface ,  uint32_t*  pRectCount ,  VkRect2D*  pRects );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkAcquireNextImage2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAcquireNextImageInfoKHR",
                ),
                name: "pAcquireInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pImageIndex",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkAcquireNextImage2KHR ( VkDevice  device , const  VkAcquireNextImageInfoKHR*  pAcquireInfo ,  uint32_t*  pImageIndex );",
}
Extension {
    name: "VK_KHR_device_group_creation",
    comment: None,
    number: Some(
        71,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_device_group_creation\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_MAX_DEVICE_GROUP_SIZE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceGroupPropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupDeviceCreateInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkEnumeratePhysicalDeviceGroupsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT",
                            extends: Some(
                                "VkMemoryHeapFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_display",
    comment: None,
    number: Some(
        3,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo,Norbert Nopper @FslNopper",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DISPLAY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "23",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DISPLAY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_display\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_DISPLAY_KHR",
                        comment: Some(
                            "VkDisplayKHR",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_DISPLAY_MODE_KHR",
                        comment: Some(
                            "VkDisplayModeKHR",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDisplayKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayModeCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayModeCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayModeKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayModeParametersKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayModePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayPlaneAlphaFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayPlaneAlphaFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayPlaneCapabilitiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayPlanePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayPropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplaySurfaceCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplaySurfaceCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceTransformFlagsKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceDisplayPropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceDisplayPlanePropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDisplayPlaneSupportedDisplaysKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDisplayModePropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateDisplayModeKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDisplayPlaneCapabilitiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateDisplayPlaneSurfaceKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceDisplayPropertiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPropertyCount",
            },
        },
        CommandParam {
            len: Some(
                "pPropertyCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayPropertiesKHR",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceDisplayPropertiesKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t*  pPropertyCount ,  VkDisplayPropertiesKHR*  pProperties );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceDisplayPlanePropertiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPropertyCount",
            },
        },
        CommandParam {
            len: Some(
                "pPropertyCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayPlanePropertiesKHR",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceDisplayPlanePropertiesKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t*  pPropertyCount ,  VkDisplayPlanePropertiesKHR*  pProperties );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDisplayPlaneSupportedDisplaysKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "planeIndex",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pDisplayCount",
            },
        },
        CommandParam {
            len: Some(
                "pDisplayCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayKHR",
                ),
                name: "pDisplays",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDisplayPlaneSupportedDisplaysKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t  planeIndex ,  uint32_t*  pDisplayCount ,  VkDisplayKHR*  pDisplays );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDisplayModePropertiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayKHR",
                ),
                name: "display",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPropertyCount",
            },
        },
        CommandParam {
            len: Some(
                "pPropertyCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayModePropertiesKHR",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDisplayModePropertiesKHR ( VkPhysicalDevice  physicalDevice ,  VkDisplayKHR  display ,  uint32_t*  pPropertyCount ,  VkDisplayModePropertiesKHR*  pProperties );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateDisplayModeKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayKHR",
                ),
                name: "display",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayModeCreateInfoKHR",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayModeKHR",
                ),
                name: "pMode",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateDisplayModeKHR ( VkPhysicalDevice  physicalDevice ,  VkDisplayKHR  display , const  VkDisplayModeCreateInfoKHR*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkDisplayModeKHR*  pMode );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDisplayPlaneCapabilitiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayModeKHR",
                ),
                name: "mode",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "planeIndex",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayPlaneCapabilitiesKHR",
                ),
                name: "pCapabilities",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDisplayPlaneCapabilitiesKHR ( VkPhysicalDevice  physicalDevice ,  VkDisplayModeKHR  mode ,  uint32_t  planeIndex ,  VkDisplayPlaneCapabilitiesKHR*  pCapabilities );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateDisplayPlaneSurfaceKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplaySurfaceCreateInfoKHR",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateDisplayPlaneSurfaceKHR ( VkInstance  instance , const  VkDisplaySurfaceCreateInfoKHR*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
Extension {
    name: "VK_KHR_display_swapchain",
    comment: None,
    number: Some(
        4,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_swapchain,VK_KHR_display",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "10",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_display_swapchain\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkResult",
                            extnumber: None,
                            dir: false,
                        },
                    },
                ),
                Type {
                    name: "VkDisplayPresentInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateSharedSwapchainsKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateSharedSwapchainsKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "swapchainCount",
            },
        },
        CommandParam {
            len: Some(
                "swapchainCount",
            ),
            altlen: None,
            externsync: Some(
                "pCreateInfos[].surface,pCreateInfos[].oldSwapchain",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainCreateInfoKHR",
                ),
                name: "pCreateInfos",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: Some(
                "swapchainCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "pSwapchains",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateSharedSwapchainsKHR ( VkDevice  device ,  uint32_t  swapchainCount , const  VkSwapchainCreateInfoKHR*  pCreateInfos , const  VkAllocationCallbacks*  pAllocator ,  VkSwapchainKHR*  pSwapchains );",
}
Extension {
    name: "VK_KHR_draw_indirect_count",
    comment: None,
    number: Some(
        170,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_draw_indirect_count\"",
                            extends: None,
                        },
                    },
                ),
                Command {
                    name: "vkCmdDrawIndirectCountKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdDrawIndexedIndirectCountKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_driver_properties",
    comment: None,
    number: Some(
        197,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Daniel Rakos @drakos-amd",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_driver_properties\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_MAX_DRIVER_NAME_SIZE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_MAX_DRIVER_INFO_SIZE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
                Type {
                    name: "VkDriverIdKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_AMD_PROPRIETARY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_AMD_PROPRIETARY",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_AMD_OPEN_SOURCE",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_MESA_RADV_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_MESA_RADV",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_NVIDIA_PROPRIETARY",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_IMAGINATION_PROPRIETARY",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_QUALCOMM_PROPRIETARY",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_ARM_PROPRIETARY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_ARM_PROPRIETARY",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_GOOGLE_SWIFTSHADER",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_GGP_PROPRIETARY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_GGP_PROPRIETARY",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DRIVER_ID_BROADCOM_PROPRIETARY",
                            extends: Some(
                                "VkDriverId",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkConformanceVersionKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceDriverPropertiesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_external_fence",
    comment: None,
    number: Some(
        114,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_fence_capabilities",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_FENCE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_fence\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkFenceImportFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkFenceImportFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_FENCE_IMPORT_TEMPORARY_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FENCE_IMPORT_TEMPORARY_BIT",
                            extends: Some(
                                "VkFenceImportFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkExportFenceCreateInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_external_fence_capabilities",
    comment: None,
    number: Some(
        113,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_fence_capabilities\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_LUID_SIZE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
                Type {
                    name: "VkExternalFenceHandleTypeFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalFenceHandleTypeFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT",
                            extends: Some(
                                "VkExternalFenceHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT",
                            extends: Some(
                                "VkExternalFenceHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
                            extends: Some(
                                "VkExternalFenceHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT",
                            extends: Some(
                                "VkExternalFenceHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkExternalFenceFeatureFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalFenceFeatureFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT",
                            extends: Some(
                                "VkExternalFenceFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT",
                            extends: Some(
                                "VkExternalFenceFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceExternalFenceInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalFencePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceIDPropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceExternalFencePropertiesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_external_fence_fd",
    comment: None,
    number: Some(
        116,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_fence",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_fence_fd\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImportFenceFdInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkFenceGetFdInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkImportFenceFdKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetFenceFdKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkImportFenceFdKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImportFenceFdInfoKHR",
                ),
                name: "pImportFenceFdInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkImportFenceFdKHR ( VkDevice  device , const  VkImportFenceFdInfoKHR*  pImportFenceFdInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetFenceFdKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFenceGetFdInfoKHR",
                ),
                name: "pGetFdInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "int",
                ),
                name: "pFd",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetFenceFdKHR ( VkDevice  device , const  VkFenceGetFdInfoKHR*  pGetFdInfo ,  int*  pFd );",
}
Extension {
    name: "VK_KHR_external_fence_win32",
    comment: None,
    number: Some(
        115,
    ),
    protect: None,
    platform: Some(
        "win32",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_fence",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_fence_win32\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImportFenceWin32HandleInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkExportFenceWin32HandleInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkFenceGetWin32HandleInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkImportFenceWin32HandleKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetFenceWin32HandleKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkImportFenceWin32HandleKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImportFenceWin32HandleInfoKHR",
                ),
                name: "pImportFenceWin32HandleInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkImportFenceWin32HandleKHR ( VkDevice  device , const  VkImportFenceWin32HandleInfoKHR*  pImportFenceWin32HandleInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetFenceWin32HandleKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFenceGetWin32HandleInfoKHR",
                ),
                name: "pGetWin32HandleInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "HANDLE",
                ),
                name: "pHandle",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetFenceWin32HandleKHR ( VkDevice  device , const  VkFenceGetWin32HandleInfoKHR*  pGetWin32HandleInfo ,  HANDLE*  pHandle );",
}
Extension {
    name: "VK_KHR_external_memory",
    comment: None,
    number: Some(
        73,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_memory_capabilities",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_memory\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ERROR_INVALID_EXTERNAL_HANDLE",
                            extends: Some(
                                "VkResult",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QUEUE_FAMILY_EXTERNAL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
                Type {
                    name: "VkExternalMemoryImageCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalMemoryBufferCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkExportMemoryAllocateInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_external_memory_capabilities",
    comment: None,
    number: Some(
        72,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_memory_capabilities\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_LUID_SIZE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
                Type {
                    name: "VkExternalMemoryHandleTypeFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalMemoryHandleTypeFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT",
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT",
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT",
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT",
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT",
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT",
                            extends: Some(
                                "VkExternalMemoryHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkExternalMemoryFeatureFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalMemoryFeatureFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT",
                            extends: Some(
                                "VkExternalMemoryFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT",
                            extends: Some(
                                "VkExternalMemoryFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT",
                            extends: Some(
                                "VkExternalMemoryFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkExternalMemoryPropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceExternalImageFormatInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalImageFormatPropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceExternalBufferInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalBufferPropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceIDPropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceExternalBufferPropertiesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_external_memory_fd",
    comment: None,
    number: Some(
        75,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_memory",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_memory_fd\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImportMemoryFdInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkMemoryFdPropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkMemoryGetFdInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetMemoryFdKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetMemoryFdPropertiesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetMemoryFdKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMemoryGetFdInfoKHR",
                ),
                name: "pGetFdInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "int",
                ),
                name: "pFd",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetMemoryFdKHR ( VkDevice  device , const  VkMemoryGetFdInfoKHR*  pGetFdInfo ,  int*  pFd );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetMemoryFdPropertiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkExternalMemoryHandleTypeFlagBits",
                ),
                name: "handleType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "int",
                ),
                name: "fd",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMemoryFdPropertiesKHR",
                ),
                name: "pMemoryFdProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetMemoryFdPropertiesKHR ( VkDevice  device ,  VkExternalMemoryHandleTypeFlagBits  handleType ,  int  fd ,  VkMemoryFdPropertiesKHR*  pMemoryFdProperties );",
}
Extension {
    name: "VK_KHR_external_memory_win32",
    comment: None,
    number: Some(
        74,
    ),
    protect: None,
    platform: Some(
        "win32",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_memory",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_memory_win32\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImportMemoryWin32HandleInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkExportMemoryWin32HandleInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkMemoryWin32HandlePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkMemoryGetWin32HandleInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetMemoryWin32HandleKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetMemoryWin32HandlePropertiesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetMemoryWin32HandleKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMemoryGetWin32HandleInfoKHR",
                ),
                name: "pGetWin32HandleInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "HANDLE",
                ),
                name: "pHandle",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetMemoryWin32HandleKHR ( VkDevice  device , const  VkMemoryGetWin32HandleInfoKHR*  pGetWin32HandleInfo ,  HANDLE*  pHandle );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetMemoryWin32HandlePropertiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkExternalMemoryHandleTypeFlagBits",
                ),
                name: "handleType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "HANDLE",
                ),
                name: "handle",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMemoryWin32HandlePropertiesKHR",
                ),
                name: "pMemoryWin32HandleProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetMemoryWin32HandlePropertiesKHR ( VkDevice  device ,  VkExternalMemoryHandleTypeFlagBits  handleType ,  HANDLE  handle ,  VkMemoryWin32HandlePropertiesKHR*  pMemoryWin32HandleProperties );",
}
Extension {
    name: "VK_KHR_external_semaphore",
    comment: None,
    number: Some(
        78,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_semaphore_capabilities",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_semaphore\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkSemaphoreImportFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkSemaphoreImportFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT",
                            extends: Some(
                                "VkSemaphoreImportFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkExportSemaphoreCreateInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_external_semaphore_capabilities",
    comment: None,
    number: Some(
        77,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_semaphore_capabilities\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_LUID_SIZE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
                Type {
                    name: "VkExternalSemaphoreHandleTypeFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalSemaphoreHandleTypeFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT",
                            extends: Some(
                                "VkExternalSemaphoreHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT",
                            extends: Some(
                                "VkExternalSemaphoreHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
                            extends: Some(
                                "VkExternalSemaphoreHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT",
                            extends: Some(
                                "VkExternalSemaphoreHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT",
                            extends: Some(
                                "VkExternalSemaphoreHandleTypeFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkExternalSemaphoreFeatureFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalSemaphoreFeatureFlagBitsKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT",
                            extends: Some(
                                "VkExternalSemaphoreFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT",
                            extends: Some(
                                "VkExternalSemaphoreFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceExternalSemaphoreInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkExternalSemaphorePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceIDPropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_external_semaphore_fd",
    comment: None,
    number: Some(
        80,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_semaphore",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_semaphore_fd\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImportSemaphoreFdInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkSemaphoreGetFdInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkImportSemaphoreFdKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetSemaphoreFdKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkImportSemaphoreFdKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImportSemaphoreFdInfoKHR",
                ),
                name: "pImportSemaphoreFdInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkImportSemaphoreFdKHR ( VkDevice  device , const  VkImportSemaphoreFdInfoKHR*  pImportSemaphoreFdInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetSemaphoreFdKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSemaphoreGetFdInfoKHR",
                ),
                name: "pGetFdInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "int",
                ),
                name: "pFd",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetSemaphoreFdKHR ( VkDevice  device , const  VkSemaphoreGetFdInfoKHR*  pGetFdInfo ,  int*  pFd );",
}
Extension {
    name: "VK_KHR_external_semaphore_win32",
    comment: None,
    number: Some(
        79,
    ),
    protect: None,
    platform: Some(
        "win32",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_semaphore",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_external_semaphore_win32\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImportSemaphoreWin32HandleInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkExportSemaphoreWin32HandleInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkD3D12FenceSubmitInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkSemaphoreGetWin32HandleInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkImportSemaphoreWin32HandleKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetSemaphoreWin32HandleKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkImportSemaphoreWin32HandleKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImportSemaphoreWin32HandleInfoKHR",
                ),
                name: "pImportSemaphoreWin32HandleInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkImportSemaphoreWin32HandleKHR ( VkDevice  device , const  VkImportSemaphoreWin32HandleInfoKHR*  pImportSemaphoreWin32HandleInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetSemaphoreWin32HandleKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSemaphoreGetWin32HandleInfoKHR",
                ),
                name: "pGetWin32HandleInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "HANDLE",
                ),
                name: "pHandle",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetSemaphoreWin32HandleKHR ( VkDevice  device , const  VkSemaphoreGetWin32HandleInfoKHR*  pGetWin32HandleInfo ,  HANDLE*  pHandle );",
}
Extension {
    name: "VK_KHR_fragment_shading_rate",
    comment: None,
    number: Some(
        227,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Tobias Hector @tobski",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_create_renderpass2,VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_fragment_shading_rate\"",
                            extends: None,
                        },
                    },
                ),
                Type {
                    name: "VkFragmentShadingRateCombinerOpKHR",
                    comment: None,
                },
                Type {
                    name: "VkFragmentShadingRateAttachmentInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkPipelineFragmentShadingRateStateCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceFragmentShadingRateFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceFragmentShadingRatePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceFragmentShadingRateKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceFragmentShadingRatesKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetFragmentShadingRateKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV",
                            extends: Some(
                                "VkImageLayout",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV",
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV",
                            extends: Some(
                                "VkImageUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV",
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 30,
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceFragmentShadingRatesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pFragmentShadingRateCount",
            },
        },
        CommandParam {
            len: Some(
                "pFragmentShadingRateCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDeviceFragmentShadingRateKHR",
                ),
                name: "pFragmentShadingRates",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceFragmentShadingRatesKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t*  pFragmentShadingRateCount ,  VkPhysicalDeviceFragmentShadingRateKHR*  pFragmentShadingRates );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetFragmentShadingRateKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkExtent2D",
                ),
                name: "pFragmentSize",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFragmentShadingRateCombinerOpKHR",
                ),
                name: "combinerOps",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetFragmentShadingRateKHR ( VkCommandBuffer            commandBuffer , const  VkExtent2D*                            pFragmentSize , const  VkFragmentShadingRateCombinerOpKHR     combinerOps[2] );",
}
Extension {
    name: "VK_KHR_get_display_properties2",
    comment: None,
    number: Some(
        122,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_display",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_get_display_properties2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDisplayProperties2KHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayPlaneProperties2KHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayModeProperties2KHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayPlaneInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkDisplayPlaneCapabilities2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceDisplayProperties2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceDisplayPlaneProperties2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDisplayModeProperties2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDisplayPlaneCapabilities2KHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceDisplayProperties2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPropertyCount",
            },
        },
        CommandParam {
            len: Some(
                "pPropertyCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayProperties2KHR",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceDisplayProperties2KHR ( VkPhysicalDevice  physicalDevice ,  uint32_t*  pPropertyCount ,  VkDisplayProperties2KHR*  pProperties );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceDisplayPlaneProperties2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPropertyCount",
            },
        },
        CommandParam {
            len: Some(
                "pPropertyCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayPlaneProperties2KHR",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceDisplayPlaneProperties2KHR ( VkPhysicalDevice  physicalDevice ,  uint32_t*  pPropertyCount ,  VkDisplayPlaneProperties2KHR*  pProperties );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDisplayModeProperties2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayKHR",
                ),
                name: "display",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPropertyCount",
            },
        },
        CommandParam {
            len: Some(
                "pPropertyCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayModeProperties2KHR",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDisplayModeProperties2KHR ( VkPhysicalDevice  physicalDevice ,  VkDisplayKHR  display ,  uint32_t*  pPropertyCount ,  VkDisplayModeProperties2KHR*  pProperties );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDisplayPlaneCapabilities2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayPlaneInfo2KHR",
                ),
                name: "pDisplayPlaneInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDisplayPlaneCapabilities2KHR",
                ),
                name: "pCapabilities",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDisplayPlaneCapabilities2KHR ( VkPhysicalDevice  physicalDevice , const  VkDisplayPlaneInfo2KHR*  pDisplayPlaneInfo ,  VkDisplayPlaneCapabilities2KHR*  pCapabilities );",
}
Extension {
    name: "VK_KHR_get_memory_requirements2",
    comment: None,
    number: Some(
        147,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jason Ekstrand @jekstrand",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_get_memory_requirements2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkBufferMemoryRequirementsInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkImageMemoryRequirementsInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkImageSparseMemoryRequirementsInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkMemoryRequirements2KHR",
                    comment: None,
                },
                Type {
                    name: "VkSparseImageMemoryRequirements2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetImageMemoryRequirements2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetBufferMemoryRequirements2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetImageSparseMemoryRequirements2KHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_get_physical_device_properties2",
    comment: None,
    number: Some(
        60,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_get_physical_device_properties2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceFeatures2KHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceProperties2KHR",
                    comment: None,
                },
                Type {
                    name: "VkFormatProperties2KHR",
                    comment: None,
                },
                Type {
                    name: "VkImageFormatProperties2KHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceImageFormatInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkQueueFamilyProperties2KHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceMemoryProperties2KHR",
                    comment: None,
                },
                Type {
                    name: "VkSparseImageFormatProperties2KHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceSparseImageFormatInfo2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceFeatures2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceProperties2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceFormatProperties2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceImageFormatProperties2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceQueueFamilyProperties2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceMemoryProperties2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSparseImageFormatProperties2KHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_get_surface_capabilities2",
    comment: None,
    number: Some(
        120,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_get_surface_capabilities2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceSurfaceInfo2KHR",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceCapabilities2KHR",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceFormat2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSurfaceCapabilities2KHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSurfaceFormats2KHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceSurfaceCapabilities2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDeviceSurfaceInfo2KHR",
                ),
                name: "pSurfaceInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceCapabilities2KHR",
                ),
                name: "pSurfaceCapabilities",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceSurfaceCapabilities2KHR ( VkPhysicalDevice  physicalDevice , const  VkPhysicalDeviceSurfaceInfo2KHR*  pSurfaceInfo ,  VkSurfaceCapabilities2KHR*  pSurfaceCapabilities );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceSurfaceFormats2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDeviceSurfaceInfo2KHR",
                ),
                name: "pSurfaceInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pSurfaceFormatCount",
            },
        },
        CommandParam {
            len: Some(
                "pSurfaceFormatCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceFormat2KHR",
                ),
                name: "pSurfaceFormats",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceSurfaceFormats2KHR ( VkPhysicalDevice  physicalDevice , const  VkPhysicalDeviceSurfaceInfo2KHR*  pSurfaceInfo ,  uint32_t*  pSurfaceFormatCount ,  VkSurfaceFormat2KHR*  pSurfaceFormats );",
}
Extension {
    name: "VK_KHR_image_format_list",
    comment: None,
    number: Some(
        148,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jason Ekstrand @jekstrand",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_image_format_list\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkImageFormatListCreateInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_imageless_framebuffer",
    comment: None,
    number: Some(
        109,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Tobias Hector @tobias",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_maintenance2,VK_KHR_image_format_list",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_imageless_framebuffer\"",
                            extends: None,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceImagelessFramebufferFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkFramebufferAttachmentsCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkFramebufferAttachmentImageInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkRenderPassAttachmentBeginInfoKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT",
                            extends: Some(
                                "VkFramebufferCreateFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_incremental_present",
    comment: None,
    number: Some(
        85,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Ian Elliott @ianelliottus",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_swapchain",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_incremental_present\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPresentRegionsKHR",
                    comment: None,
                },
                Type {
                    name: "VkPresentRegionKHR",
                    comment: None,
                },
                Type {
                    name: "VkRectLayerKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_maintenance1",
    comment: None,
    number: Some(
        70,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_MAINTENANCE1_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_MAINTENANCE1_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_maintenance1\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_OUT_OF_POOL_MEMORY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ERROR_OUT_OF_POOL_MEMORY",
                            extends: Some(
                                "VkResult",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_TRANSFER_DST_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT",
                            extends: Some(
                                "VkImageCreateFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkCommandPoolTrimFlagsKHR",
                    comment: None,
                },
                Command {
                    name: "vkTrimCommandPoolKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_maintenance2",
    comment: None,
    number: Some(
        118,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Michael Worcester @michaelworcester",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_MAINTENANCE2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_MAINTENANCE2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_maintenance2\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT",
                            extends: Some(
                                "VkImageCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT",
                            extends: Some(
                                "VkImageCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL",
                            extends: Some(
                                "VkImageLayout",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL",
                            extends: Some(
                                "VkImageLayout",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevicePointClippingPropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPointClippingBehaviorKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES",
                            extends: Some(
                                "VkPointClippingBehavior",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY",
                            extends: Some(
                                "VkPointClippingBehavior",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkRenderPassInputAttachmentAspectCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkInputAttachmentAspectReferenceKHR",
                    comment: None,
                },
                Type {
                    name: "VkImageViewUsageCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkTessellationDomainOriginKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT",
                            extends: Some(
                                "VkTessellationDomainOrigin",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT",
                            extends: Some(
                                "VkTessellationDomainOrigin",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPipelineTessellationDomainOriginStateCreateInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_maintenance3",
    comment: None,
    number: Some(
        169,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_MAINTENANCE3_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_MAINTENANCE3_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_maintenance3\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceMaintenance3PropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkDescriptorSetLayoutSupportKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDescriptorSetLayoutSupportKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_multiview",
    comment: None,
    number: Some(
        54,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_MULTIVIEW_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_MULTIVIEW_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_multiview\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DEPENDENCY_VIEW_LOCAL_BIT",
                            extends: Some(
                                "VkDependencyFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkRenderPassMultiviewCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceMultiviewFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceMultiviewPropertiesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_performance_query",
    comment: None,
    number: Some(
        117,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Alon Or-bach @alonorbach",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "devtools",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_performance_query\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkQueryType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevicePerformanceQueryFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDevicePerformanceQueryPropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceCounterKHR",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceCounterDescriptionKHR",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceCounterDescriptionFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceCounterDescriptionFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkQueryPoolPerformanceCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceCounterScopeKHR",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceCounterStorageKHR",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceCounterUnitKHR",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceCounterResultKHR",
                    comment: None,
                },
                Type {
                    name: "VkAcquireProfilingLockInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkAcquireProfilingLockFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkAcquireProfilingLockFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkPerformanceQuerySubmitInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR",
                    comment: None,
                },
                Command {
                    name: "vkAcquireProfilingLockKHR",
                    comment: None,
                },
                Command {
                    name: "vkReleaseProfilingLockKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "queueFamilyIndex",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pCounterCount",
            },
        },
        CommandParam {
            len: Some(
                "pCounterCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceCounterKHR",
                ),
                name: "pCounters",
            },
        },
        CommandParam {
            len: Some(
                "pCounterCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPerformanceCounterDescriptionKHR",
                ),
                name: "pCounterDescriptions",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t  queueFamilyIndex ,  uint32_t*  pCounterCount ,  VkPerformanceCounterKHR*  pCounters ,  VkPerformanceCounterDescriptionKHR*  pCounterDescriptions );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueryPoolPerformanceCreateInfoKHR",
                ),
                name: "pPerformanceQueryCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pNumPasses",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR ( VkPhysicalDevice  physicalDevice , const  VkQueryPoolPerformanceCreateInfoKHR*  pPerformanceQueryCreateInfo ,  uint32_t*  pNumPasses );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_TIMEOUT",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkAcquireProfilingLockKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAcquireProfilingLockInfoKHR",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkAcquireProfilingLockKHR ( VkDevice  device , const  VkAcquireProfilingLockInfoKHR*  pInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkReleaseProfilingLockKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkReleaseProfilingLockKHR ( VkDevice  device );",
}
Extension {
    name: "VK_KHR_pipeline_executable_properties",
    comment: None,
    number: Some(
        270,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jason Ekstrand @jekstrand",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: Some(
        "devtools",
    ),
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_pipeline_executable_properties\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 6,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 7,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPipelineInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkPipelineExecutablePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPipelineExecutableInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkPipelineExecutableStatisticFormatKHR",
                    comment: None,
                },
                Type {
                    name: "VkPipelineExecutableStatisticValueKHR",
                    comment: None,
                },
                Type {
                    name: "VkPipelineExecutableStatisticKHR",
                    comment: None,
                },
                Type {
                    name: "VkPipelineExecutableInternalRepresentationKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPipelineExecutablePropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPipelineExecutableStatisticsKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPipelineExecutableInternalRepresentationsKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPipelineExecutablePropertiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineInfoKHR",
                ),
                name: "pPipelineInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pExecutableCount",
            },
        },
        CommandParam {
            len: Some(
                "pExecutableCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineExecutablePropertiesKHR",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPipelineExecutablePropertiesKHR ( VkDevice                         device , const  VkPipelineInfoKHR*         pPipelineInfo ,  uint32_t*  pExecutableCount ,  VkPipelineExecutablePropertiesKHR*  pProperties );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPipelineExecutableStatisticsKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineExecutableInfoKHR",
                ),
                name: "pExecutableInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pStatisticCount",
            },
        },
        CommandParam {
            len: Some(
                "pStatisticCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineExecutableStatisticKHR",
                ),
                name: "pStatistics",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPipelineExecutableStatisticsKHR ( VkDevice                         device , const  VkPipelineExecutableInfoKHR*   pExecutableInfo ,  uint32_t*  pStatisticCount ,  VkPipelineExecutableStatisticKHR*  pStatistics );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPipelineExecutableInternalRepresentationsKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineExecutableInfoKHR",
                ),
                name: "pExecutableInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pInternalRepresentationCount",
            },
        },
        CommandParam {
            len: Some(
                "pInternalRepresentationCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineExecutableInternalRepresentationKHR",
                ),
                name: "pInternalRepresentations",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPipelineExecutableInternalRepresentationsKHR ( VkDevice                         device , const  VkPipelineExecutableInfoKHR*   pExecutableInfo ,  uint32_t*  pInternalRepresentationCount ,  VkPipelineExecutableInternalRepresentationKHR*  pInternalRepresentations );",
}
Extension {
    name: "VK_KHR_pipeline_library",
    comment: None,
    number: Some(
        291,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Christoph Kubisch @pixeljetstream",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_pipeline_library\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_LIBRARY_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 11,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPipelineLibraryCreateInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_portability_subset",
    comment: None,
    number: Some(
        164,
    ),
    protect: None,
    platform: Some(
        "provisional",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Bill Hollings @billhollings",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: true,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_PORTABILITY_SUBSET_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_portability_subset\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDevicePortabilitySubsetFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDevicePortabilitySubsetPropertiesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_push_descriptor",
    comment: None,
    number: Some(
        81,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_push_descriptor\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR",
                        comment: Some(
                            "Descriptors are pushed via flink:vkCmdPushDescriptorSetKHR",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 0,
                            extends: Some(
                                "VkDescriptorSetLayoutCreateFlagBits",
                            ),
                        },
                    },
                ),
                Command {
                    name: "vkCmdPushDescriptorSetKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDevicePushDescriptorPropertiesKHR",
                    comment: None,
                },
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: Some(
                "VK_VERSION_1_1",
            ),
            comment: None,
            items: [
                Command {
                    name: "vkCmdPushDescriptorSetWithTemplateKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR",
                        comment: Some(
                            "Create descriptor update template for pushed descriptor updates",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: Some(
                                "VkDescriptorUpdateTemplateType",
                            ),
                        },
                    },
                ),
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_KHR_descriptor_update_template",
            ),
            feature: None,
            comment: None,
            items: [
                Command {
                    name: "vkCmdPushDescriptorSetWithTemplateKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR",
                        comment: Some(
                            "Create descriptor update template for pushed descriptor updates",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: Some(
                                "VkDescriptorUpdateTemplateType",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdPushDescriptorSetKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineBindPoint",
                ),
                name: "pipelineBindPoint",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineLayout",
                ),
                name: "layout",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "set",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "descriptorWriteCount",
            },
        },
        CommandParam {
            len: Some(
                "descriptorWriteCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkWriteDescriptorSet",
                ),
                name: "pDescriptorWrites",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdPushDescriptorSetKHR ( VkCommandBuffer  commandBuffer ,  VkPipelineBindPoint  pipelineBindPoint ,  VkPipelineLayout  layout ,  uint32_t  set ,  uint32_t  descriptorWriteCount , const  VkWriteDescriptorSet*  pDescriptorWrites );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdPushDescriptorSetWithTemplateKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDescriptorUpdateTemplate",
                ),
                name: "descriptorUpdateTemplate",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineLayout",
                ),
                name: "layout",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "set",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: Some(
                "true",
            ),
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdPushDescriptorSetWithTemplateKHR ( VkCommandBuffer  commandBuffer ,  VkDescriptorUpdateTemplate  descriptorUpdateTemplate ,  VkPipelineLayout  layout ,  uint32_t  set , const  void*  pData );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdPushDescriptorSetWithTemplateKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDescriptorUpdateTemplate",
                ),
                name: "descriptorUpdateTemplate",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineLayout",
                ),
                name: "layout",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "set",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: Some(
                "true",
            ),
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdPushDescriptorSetWithTemplateKHR ( VkCommandBuffer  commandBuffer ,  VkDescriptorUpdateTemplate  descriptorUpdateTemplate ,  VkPipelineLayout  layout ,  uint32_t  set , const  void*  pData );",
}
Extension {
    name: "VK_KHR_ray_query",
    comment: None,
    number: Some(
        349,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_spirv_1_4,VK_KHR_acceleration_structure",
    ),
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: Some(
        1,
    ),
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_RAY_QUERY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_RAY_QUERY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_ray_query\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 13,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceRayQueryFeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_ray_tracing_pipeline",
    comment: None,
    number: Some(
        348,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_spirv_1_4,VK_KHR_acceleration_structure",
    ),
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: Some(
        1,
    ),
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_ray_tracing_pipeline\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_UNUSED_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 15,
                            extends: "VkStructureType",
                            extnumber: Some(
                                151,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 16,
                            extends: "VkStructureType",
                            extnumber: Some(
                                151,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 18,
                            extends: "VkStructureType",
                            extnumber: Some(
                                151,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_RAYGEN_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 8,
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_ANY_HIT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 9,
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 10,
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_MISS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 11,
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_INTERSECTION_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 12,
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_CALLABLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 13,
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 21,
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 10,
                            extends: Some(
                                "VkBufferUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkPipelineBindPoint",
                            extnumber: Some(
                                166,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 14,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 15,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 16,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 17,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 12,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 13,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 19,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkRayTracingShaderGroupCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkRayTracingShaderGroupTypeKHR",
                    comment: None,
                },
                Type {
                    name: "VkRayTracingPipelineCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceRayTracingPipelineFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceRayTracingPipelinePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkStridedDeviceAddressRegionKHR",
                    comment: None,
                },
                Type {
                    name: "VkTraceRaysIndirectCommandKHR",
                    comment: None,
                },
                Type {
                    name: "VkRayTracingPipelineInterfaceCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkShaderGroupShaderKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdTraceRaysKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateRayTracingPipelinesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetRayTracingShaderGroupHandlesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdTraceRaysIndirectKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetRayTracingShaderGroupStackSizeKHR",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetRayTracingPipelineStackSizeKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdTraceRaysKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStridedDeviceAddressRegionKHR",
                ),
                name: "pRaygenShaderBindingTable",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStridedDeviceAddressRegionKHR",
                ),
                name: "pMissShaderBindingTable",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStridedDeviceAddressRegionKHR",
                ),
                name: "pHitShaderBindingTable",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStridedDeviceAddressRegionKHR",
                ),
                name: "pCallableShaderBindingTable",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "width",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "height",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "depth",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdTraceRaysKHR ( VkCommandBuffer  commandBuffer , const  VkStridedDeviceAddressRegionKHR*  pRaygenShaderBindingTable , const  VkStridedDeviceAddressRegionKHR*  pMissShaderBindingTable , const  VkStridedDeviceAddressRegionKHR*  pHitShaderBindingTable , const  VkStridedDeviceAddressRegionKHR*  pCallableShaderBindingTable ,  uint32_t  width ,  uint32_t  height ,  uint32_t  depth );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR,VK_PIPELINE_COMPILE_REQUIRED_EXT",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateRayTracingPipelinesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeferredOperationKHR",
                ),
                name: "deferredOperation",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineCache",
                ),
                name: "pipelineCache",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "createInfoCount",
            },
        },
        CommandParam {
            len: Some(
                "createInfoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkRayTracingPipelineCreateInfoKHR",
                ),
                name: "pCreateInfos",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: Some(
                "createInfoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipeline",
                ),
                name: "pPipelines",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateRayTracingPipelinesKHR ( VkDevice  device ,  VkDeferredOperationKHR  deferredOperation ,  VkPipelineCache  pipelineCache ,  uint32_t  createInfoCount , const  VkRayTracingPipelineCreateInfoKHR*  pCreateInfos , const  VkAllocationCallbacks*  pAllocator ,  VkPipeline*  pPipelines );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetRayTracingShaderGroupHandlesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipeline",
                ),
                name: "pipeline",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstGroup",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "groupCount",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "size_t",
                ),
                name: "dataSize",
            },
        },
        CommandParam {
            len: Some(
                "dataSize",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetRayTracingShaderGroupHandlesKHR ( VkDevice  device ,  VkPipeline  pipeline ,  uint32_t  firstGroup ,  uint32_t  groupCount ,  size_t  dataSize ,  void*  pData );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipeline",
                ),
                name: "pipeline",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstGroup",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "groupCount",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "size_t",
                ),
                name: "dataSize",
            },
        },
        CommandParam {
            len: Some(
                "dataSize",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetRayTracingCaptureReplayShaderGroupHandlesKHR ( VkDevice  device ,  VkPipeline  pipeline ,  uint32_t  firstGroup ,  uint32_t  groupCount ,  size_t  dataSize ,  void*  pData );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdTraceRaysIndirectKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStridedDeviceAddressRegionKHR",
                ),
                name: "pRaygenShaderBindingTable",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStridedDeviceAddressRegionKHR",
                ),
                name: "pMissShaderBindingTable",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStridedDeviceAddressRegionKHR",
                ),
                name: "pHitShaderBindingTable",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkStridedDeviceAddressRegionKHR",
                ),
                name: "pCallableShaderBindingTable",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceAddress",
                ),
                name: "indirectDeviceAddress",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdTraceRaysIndirectKHR ( VkCommandBuffer  commandBuffer , const  VkStridedDeviceAddressRegionKHR*  pRaygenShaderBindingTable , const  VkStridedDeviceAddressRegionKHR*  pMissShaderBindingTable , const  VkStridedDeviceAddressRegionKHR*  pHitShaderBindingTable , const  VkStridedDeviceAddressRegionKHR*  pCallableShaderBindingTable ,  VkDeviceAddress  indirectDeviceAddress );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkDeviceSize",
        ),
        name: "vkGetRayTracingShaderGroupStackSizeKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipeline",
                ),
                name: "pipeline",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "group",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkShaderGroupShaderKHR",
                ),
                name: "groupShader",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkDeviceSize  vkGetRayTracingShaderGroupStackSizeKHR ( VkDevice  device ,  VkPipeline  pipeline ,  uint32_t  group ,  VkShaderGroupShaderKHR  groupShader );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetRayTracingPipelineStackSizeKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pipelineStackSize",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetRayTracingPipelineStackSizeKHR ( VkCommandBuffer  commandBuffer ,  uint32_t  pipelineStackSize );",
}
Extension {
    name: "VK_KHR_relaxed_block_layout",
    comment: None,
    number: Some(
        145,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "John Kessenich @johnkslang",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_relaxed_block_layout\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_sampler_mirror_clamp_to_edge",
    comment: None,
    number: Some(
        15,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Tobias Hector @tobski",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_sampler_mirror_clamp_to_edge\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
                        comment: Some(
                            "Note that this defines what was previously a core enum, and so uses the \'value\' attribute rather than \'offset\', and does not have a suffix. This is a special case, and should not be repeated",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "4",
                            extends: Some(
                                "VkSamplerAddressMode",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR",
                        comment: Some(
                            "Alias introduced for consistency with extension suffixing rules",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
                            extends: Some(
                                "VkSamplerAddressMode",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_sampler_ycbcr_conversion",
    comment: None,
    number: Some(
        157,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Andrew Garrard @fluppeteer",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_maintenance1,VK_KHR_bind_memory2,VK_KHR_get_memory_requirements2,VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "14",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_sampler_ycbcr_conversion\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT",
                            extends: Some(
                                "VkDebugReportObjectTypeEXT",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION",
                            extends: Some(
                                "VkObjectType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G8B8G8R8_422_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G8B8G8R8_422_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_B8G8R8G8_422_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_B8G8R8G8_422_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_R10X6_UNORM_PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_R10X6_UNORM_PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_R10X6G10X6_UNORM_2PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_R12X4_UNORM_PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_R12X4_UNORM_PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_R12X4G12X4_UNORM_2PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G16B16G16R16_422_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G16B16G16R16_422_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_B16G16R16G16_422_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_B16G16R16G16_422_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM",
                            extends: Some(
                                "VkFormat",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_ASPECT_PLANE_0_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_ASPECT_PLANE_0_BIT",
                            extends: Some(
                                "VkImageAspectFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_ASPECT_PLANE_1_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_ASPECT_PLANE_1_BIT",
                            extends: Some(
                                "VkImageAspectFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_ASPECT_PLANE_2_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_ASPECT_PLANE_2_BIT",
                            extends: Some(
                                "VkImageAspectFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_CREATE_DISJOINT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_CREATE_DISJOINT_BIT",
                            extends: Some(
                                "VkImageCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_DISJOINT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_DISJOINT_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT",
                            extends: Some(
                                "VkFormatFeatureFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkSamplerYcbcrConversionCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkSamplerYcbcrConversionInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkBindImagePlaneMemoryInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkImagePlaneMemoryRequirementsInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkSamplerYcbcrConversionImageFormatPropertiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateSamplerYcbcrConversionKHR",
                    comment: None,
                },
                Command {
                    name: "vkDestroySamplerYcbcrConversionKHR",
                    comment: None,
                },
                Type {
                    name: "VkSamplerYcbcrConversionKHR",
                    comment: None,
                },
                Type {
                    name: "VkSamplerYcbcrModelConversionKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY",
                            extends: Some(
                                "VkSamplerYcbcrModelConversion",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY",
                            extends: Some(
                                "VkSamplerYcbcrModelConversion",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709",
                            extends: Some(
                                "VkSamplerYcbcrModelConversion",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601",
                            extends: Some(
                                "VkSamplerYcbcrModelConversion",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020",
                            extends: Some(
                                "VkSamplerYcbcrModelConversion",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkSamplerYcbcrRangeKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_YCBCR_RANGE_ITU_FULL",
                            extends: Some(
                                "VkSamplerYcbcrRange",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW",
                            extends: Some(
                                "VkSamplerYcbcrRange",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkChromaLocationKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_CHROMA_LOCATION_COSITED_EVEN_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_CHROMA_LOCATION_COSITED_EVEN",
                            extends: Some(
                                "VkChromaLocation",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_CHROMA_LOCATION_MIDPOINT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_CHROMA_LOCATION_MIDPOINT",
                            extends: Some(
                                "VkChromaLocation",
                            ),
                        },
                    },
                ),
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: Some(
                "VK_EXT_debug_report",
            ),
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDebugReportObjectTypeEXT",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_separate_depth_stencil_layouts",
    comment: None,
    number: Some(
        242,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2,VK_KHR_create_renderpass2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_separate_depth_stencil_layouts\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL",
                            extends: Some(
                                "VkImageLayout",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL",
                            extends: Some(
                                "VkImageLayout",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL",
                            extends: Some(
                                "VkImageLayout",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL",
                            extends: Some(
                                "VkImageLayout",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkAttachmentReferenceStencilLayoutKHR",
                    comment: None,
                },
                Type {
                    name: "VkAttachmentDescriptionStencilLayoutKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_shader_atomic_int64",
    comment: None,
    number: Some(
        181,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Aaron Hagan @ahagan",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_shader_atomic_int64\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_shader_clock",
    comment: None,
    number: Some(
        182,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Aaron Hagan @ahagan",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_CLOCK_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_CLOCK_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_shader_clock\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderClockFeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_shader_draw_parameters",
    comment: None,
    number: Some(
        64,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_shader_draw_parameters\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_shader_float16_int8",
    comment: None,
    number: Some(
        83,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Alexander Galazin @alegal-arm",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_shader_float16_int8\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderFloat16Int8FeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceFloat16Int8FeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_shader_float_controls",
    comment: None,
    number: Some(
        198,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Alexander Galazin @alegal-arm",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "4",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_shader_float_controls\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceFloatControlsPropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkShaderFloatControlsIndependenceKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY",
                            extends: Some(
                                "VkShaderFloatControlsIndependence",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL",
                            extends: Some(
                                "VkShaderFloatControlsIndependence",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE",
                            extends: Some(
                                "VkShaderFloatControlsIndependence",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_shader_non_semantic_info",
    comment: None,
    number: Some(
        294,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Baldur Karlsson @baldurk",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_shader_non_semantic_info\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_shader_subgroup_extended_types",
    comment: None,
    number: Some(
        176,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Neil Henning @sheredom",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_shader_subgroup_extended_types\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_shader_terminate_invocation",
    comment: None,
    number: Some(
        216,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_shader_terminate_invocation\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_shared_presentable_image",
    comment: None,
    number: Some(
        112,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Alon Or-bach @alonorbach",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_swapchain,VK_KHR_get_physical_device_properties2,VK_KHR_get_surface_capabilities2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_shared_presentable_image\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkPresentModeKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkPresentModeKHR",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkImageLayout",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkSharedPresentSurfaceCapabilitiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetSwapchainStatusKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_SUBOPTIMAL_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetSwapchainStatusKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapchain",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetSwapchainStatusKHR ( VkDevice  device ,  VkSwapchainKHR  swapchain );",
}
Extension {
    name: "VK_KHR_spirv_1_4",
    comment: None,
    number: Some(
        237,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_shader_float_controls",
    ),
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SPIRV_1_4_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SPIRV_1_4_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_spirv_1_4\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_storage_buffer_storage_class",
    comment: None,
    number: Some(
        132,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Alexander Galazin @alegal-arm",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_storage_buffer_storage_class\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_surface",
    comment: None,
    number: Some(
        1,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo,Ian Elliott @ianelliottus",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "25",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_SURFACE_LOST_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkResult",
                            extnumber: None,
                            dir: false,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkResult",
                            extnumber: None,
                            dir: false,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_SURFACE_KHR",
                        comment: Some(
                            "VkSurfaceKHR",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkSurfaceKHR",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceTransformFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkPresentModeKHR",
                    comment: None,
                },
                Type {
                    name: "VkColorSpaceKHR",
                    comment: None,
                },
                Type {
                    name: "VkCompositeAlphaFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkCompositeAlphaFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceCapabilitiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkSurfaceFormatKHR",
                    comment: None,
                },
                Command {
                    name: "vkDestroySurfaceKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSurfaceSupportKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSurfaceCapabilitiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSurfaceFormatsKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSurfacePresentModesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroySurfaceKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroySurfaceKHR ( VkInstance  instance ,  VkSurfaceKHR  surface , const  VkAllocationCallbacks*  pAllocator );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceSurfaceSupportKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "queueFamilyIndex",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBool32",
                ),
                name: "pSupported",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceSurfaceSupportKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t  queueFamilyIndex ,  VkSurfaceKHR  surface ,  VkBool32*  pSupported );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceSurfaceCapabilitiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceCapabilitiesKHR",
                ),
                name: "pSurfaceCapabilities",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceSurfaceCapabilitiesKHR ( VkPhysicalDevice  physicalDevice ,  VkSurfaceKHR  surface ,  VkSurfaceCapabilitiesKHR*  pSurfaceCapabilities );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceSurfaceFormatsKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pSurfaceFormatCount",
            },
        },
        CommandParam {
            len: Some(
                "pSurfaceFormatCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceFormatKHR",
                ),
                name: "pSurfaceFormats",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceSurfaceFormatsKHR ( VkPhysicalDevice  physicalDevice ,  VkSurfaceKHR  surface ,  uint32_t*  pSurfaceFormatCount ,  VkSurfaceFormatKHR*  pSurfaceFormats );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceSurfacePresentModesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPresentModeCount",
            },
        },
        CommandParam {
            len: Some(
                "pPresentModeCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPresentModeKHR",
                ),
                name: "pPresentModes",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceSurfacePresentModesKHR ( VkPhysicalDevice  physicalDevice ,  VkSurfaceKHR  surface ,  uint32_t*  pPresentModeCount ,  VkPresentModeKHR*  pPresentModes );",
}
Extension {
    name: "VK_KHR_surface_protected_capabilities",
    comment: None,
    number: Some(
        240,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Sandeep Shinde @sashinde",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_get_surface_capabilities2",
    ),
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_surface_protected_capabilities\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkSurfaceProtectedCapabilitiesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_swapchain",
    comment: None,
    number: Some(
        2,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "James Jones @cubanismo,Ian Elliott @ianelliottus",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SWAPCHAIN_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "70",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SWAPCHAIN_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_swapchain\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkImageLayout",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SUBOPTIMAL_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkResult",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_OUT_OF_DATE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkResult",
                            extnumber: None,
                            dir: false,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_SWAPCHAIN_KHR",
                        comment: Some(
                            "VkSwapchainKHR",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkSwapchainCreateFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkSwapchainCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkSwapchainCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkSwapchainKHR",
                    comment: None,
                },
                Type {
                    name: "VkPresentInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateSwapchainKHR",
                    comment: None,
                },
                Command {
                    name: "vkDestroySwapchainKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetSwapchainImagesKHR",
                    comment: None,
                },
                Command {
                    name: "vkAcquireNextImageKHR",
                    comment: None,
                },
                Command {
                    name: "vkQueuePresentKHR",
                    comment: None,
                },
            ],
        },
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: Some(
                "VK_VERSION_1_1",
            ),
            comment: None,
            items: [
                Comment(
                    "This duplicates definitions in VK_KHR_device_group below",
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkStructureType",
                            extnumber: Some(
                                61,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 8,
                            extends: "VkStructureType",
                            extnumber: Some(
                                61,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 9,
                            extends: "VkStructureType",
                            extnumber: Some(
                                61,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 10,
                            extends: "VkStructureType",
                            extnumber: Some(
                                61,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 11,
                            extends: "VkStructureType",
                            extnumber: Some(
                                61,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 12,
                            extends: "VkStructureType",
                            extnumber: Some(
                                61,
                            ),
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
                        comment: Some(
                            "Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 0,
                            extends: Some(
                                "VkSwapchainCreateFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkImageSwapchainCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkBindImageMemorySwapchainInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkAcquireNextImageInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupPresentModeFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupPresentModeFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupPresentCapabilitiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupPresentInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkDeviceGroupSwapchainCreateInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDeviceGroupPresentCapabilitiesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetDeviceGroupSurfacePresentModesKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDevicePresentRectanglesKHR",
                    comment: None,
                },
                Command {
                    name: "vkAcquireNextImage2KHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR",
                        comment: Some(
                            "Swapchain is protected",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 1,
                            extends: Some(
                                "VkSwapchainCreateFlagBitsKHR",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,VK_ERROR_INITIALIZATION_FAILED",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateSwapchainKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "pCreateInfo->surface,pCreateInfo->oldSwapchain",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainCreateInfoKHR",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "pSwapchain",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateSwapchainKHR ( VkDevice  device , const  VkSwapchainCreateInfoKHR*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSwapchainKHR*  pSwapchain );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroySwapchainKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapchain",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroySwapchainKHR ( VkDevice  device ,  VkSwapchainKHR  swapchain , const  VkAllocationCallbacks*  pAllocator );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetSwapchainImagesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapchain",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pSwapchainImageCount",
            },
        },
        CommandParam {
            len: Some(
                "pSwapchainImageCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImage",
                ),
                name: "pSwapchainImages",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetSwapchainImagesKHR ( VkDevice  device ,  VkSwapchainKHR  swapchain ,  uint32_t*  pSwapchainImageCount ,  VkImage*  pSwapchainImages );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkAcquireNextImageKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSwapchainKHR",
                ),
                name: "swapchain",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint64_t",
                ),
                name: "timeout",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSemaphore",
                ),
                name: "semaphore",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFence",
                ),
                name: "fence",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pImageIndex",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkAcquireNextImageKHR ( VkDevice  device ,  VkSwapchainKHR  swapchain ,  uint64_t  timeout ,  VkSemaphore  semaphore ,  VkFence  fence ,  uint32_t*  pImageIndex );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_SUBOPTIMAL_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkQueuePresentKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueue",
                ),
                name: "queue",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "pPresentInfo->pWaitSemaphores[],pPresentInfo->pSwapchains[]",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPresentInfoKHR",
                ),
                name: "pPresentInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkQueuePresentKHR ( VkQueue  queue , const  VkPresentInfoKHR*  pPresentInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDeviceGroupPresentCapabilitiesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceGroupPresentCapabilitiesKHR",
                ),
                name: "pDeviceGroupPresentCapabilities",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDeviceGroupPresentCapabilitiesKHR ( VkDevice  device ,  VkDeviceGroupPresentCapabilitiesKHR*  pDeviceGroupPresentCapabilities );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetDeviceGroupSurfacePresentModesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceGroupPresentModeFlagsKHR",
                ),
                name: "pModes",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetDeviceGroupSurfacePresentModesKHR ( VkDevice  device ,  VkSurfaceKHR  surface ,  VkDeviceGroupPresentModeFlagsKHR*  pModes );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDevicePresentRectanglesKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "surface",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pRectCount",
            },
        },
        CommandParam {
            len: Some(
                "pRectCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkRect2D",
                ),
                name: "pRects",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDevicePresentRectanglesKHR ( VkPhysicalDevice  physicalDevice ,  VkSurfaceKHR  surface ,  uint32_t*  pRectCount ,  VkRect2D*  pRects );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkAcquireNextImage2KHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAcquireNextImageInfoKHR",
                ),
                name: "pAcquireInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pImageIndex",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkAcquireNextImage2KHR ( VkDevice  device , const  VkAcquireNextImageInfoKHR*  pAcquireInfo ,  uint32_t*  pImageIndex );",
}
Extension {
    name: "VK_KHR_swapchain_mutable_format",
    comment: None,
    number: Some(
        201,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Daniel Rakos @drakos-arm",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_swapchain,VK_KHR_maintenance2,VK_KHR_image_format_list",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_swapchain_mutable_format\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 2,
                            extends: Some(
                                "VkSwapchainCreateFlagBitsKHR",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_timeline_semaphore",
    comment: None,
    number: Some(
        208,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jason Ekstrand @jekstrand",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_timeline_semaphore\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SEMAPHORE_TYPE_BINARY_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SEMAPHORE_TYPE_BINARY",
                            extends: Some(
                                "VkSemaphoreType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SEMAPHORE_TYPE_TIMELINE_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SEMAPHORE_TYPE_TIMELINE",
                            extends: Some(
                                "VkSemaphoreType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SEMAPHORE_WAIT_ANY_BIT_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SEMAPHORE_WAIT_ANY_BIT",
                            extends: Some(
                                "VkSemaphoreWaitFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkSemaphoreTypeKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceTimelineSemaphoreFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceTimelineSemaphorePropertiesKHR",
                    comment: None,
                },
                Type {
                    name: "VkSemaphoreTypeCreateInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkTimelineSemaphoreSubmitInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkSemaphoreWaitFlagBitsKHR",
                    comment: None,
                },
                Type {
                    name: "VkSemaphoreWaitFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkSemaphoreWaitInfoKHR",
                    comment: None,
                },
                Type {
                    name: "VkSemaphoreSignalInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetSemaphoreCounterValueKHR",
                    comment: None,
                },
                Command {
                    name: "vkWaitSemaphoresKHR",
                    comment: None,
                },
                Command {
                    name: "vkSignalSemaphoreKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_uniform_buffer_standard_layout",
    comment: None,
    number: Some(
        254,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Graeme Leese @gnl21",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_uniform_buffer_standard_layout\"",
                            extends: None,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_variable_pointers",
    comment: None,
    number: Some(
        121,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2,VK_KHR_storage_buffer_storage_class",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_1",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_VARIABLE_POINTERS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_variable_pointers\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceVariablePointerFeaturesKHR",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceVariablePointersFeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_vulkan_memory_model",
    comment: None,
    number: Some(
        212,
    ),
    protect: None,
    platform: None,
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_VERSION_1_2",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_vulkan_memory_model\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES",
                            extends: Some(
                                "VkStructureType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_wayland_surface",
    comment: None,
    number: Some(
        7,
    ),
    protect: None,
    platform: Some(
        "wayland",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec,Ian Elliott @ianelliottus",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_WAYLAND_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "6",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_wayland_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkWaylandSurfaceCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkWaylandSurfaceCreateInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateWaylandSurfaceKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceWaylandPresentationSupportKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateWaylandSurfaceKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkWaylandSurfaceCreateInfoKHR",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateWaylandSurfaceKHR ( VkInstance  instance , const  VkWaylandSurfaceCreateInfoKHR*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkBool32",
        ),
        name: "vkGetPhysicalDeviceWaylandPresentationSupportKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "queueFamilyIndex",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "wl_display",
                ),
                name: "display",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkBool32  vkGetPhysicalDeviceWaylandPresentationSupportKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t  queueFamilyIndex , struct  wl_display*  display );",
}
Extension {
    name: "VK_KHR_win32_keyed_mutex",
    comment: None,
    number: Some(
        76,
    ),
    protect: None,
    platform: Some(
        "win32",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Carsten Rohde @crohde",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_external_memory_win32",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_win32_keyed_mutex\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkWin32KeyedMutexAcquireReleaseInfoKHR",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_KHR_win32_surface",
    comment: None,
    number: Some(
        10,
    ),
    protect: None,
    platform: Some(
        "win32",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec,Ian Elliott @ianelliottus",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_WIN32_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "6",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_WIN32_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_win32_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkWin32SurfaceCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkWin32SurfaceCreateInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateWin32SurfaceKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceWin32PresentationSupportKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateWin32SurfaceKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkWin32SurfaceCreateInfoKHR",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateWin32SurfaceKHR ( VkInstance  instance , const  VkWin32SurfaceCreateInfoKHR*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkBool32",
        ),
        name: "vkGetPhysicalDeviceWin32PresentationSupportKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "queueFamilyIndex",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkBool32  vkGetPhysicalDeviceWin32PresentationSupportKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t  queueFamilyIndex );",
}
Extension {
    name: "VK_KHR_xcb_surface",
    comment: None,
    number: Some(
        6,
    ),
    protect: None,
    platform: Some(
        "xcb",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec,Ian Elliott @ianelliottus",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_XCB_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "6",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_XCB_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_xcb_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkXcbSurfaceCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkXcbSurfaceCreateInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateXcbSurfaceKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceXcbPresentationSupportKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateXcbSurfaceKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkXcbSurfaceCreateInfoKHR",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateXcbSurfaceKHR ( VkInstance  instance , const  VkXcbSurfaceCreateInfoKHR*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkBool32",
        ),
        name: "vkGetPhysicalDeviceXcbPresentationSupportKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "queueFamilyIndex",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "xcb_connection_t",
                ),
                name: "connection",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "xcb_visualid_t",
                ),
                name: "visual_id",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkBool32  vkGetPhysicalDeviceXcbPresentationSupportKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t  queueFamilyIndex ,  xcb_connection_t*  connection ,  xcb_visualid_t  visual_id );",
}
Extension {
    name: "VK_KHR_xlib_surface",
    comment: None,
    number: Some(
        5,
    ),
    protect: None,
    platform: Some(
        "xlib",
    ),
    author: Some(
        "KHR",
    ),
    contact: Some(
        "Jesse Hall @critsec,Ian Elliott @ianelliottus",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_KHR_XLIB_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "6",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_KHR_XLIB_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_KHR_xlib_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkXlibSurfaceCreateFlagsKHR",
                    comment: None,
                },
                Type {
                    name: "VkXlibSurfaceCreateInfoKHR",
                    comment: None,
                },
                Command {
                    name: "vkCreateXlibSurfaceKHR",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceXlibPresentationSupportKHR",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateXlibSurfaceKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkXlibSurfaceCreateInfoKHR",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateXlibSurfaceKHR ( VkInstance  instance , const  VkXlibSurfaceCreateInfoKHR*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkBool32",
        ),
        name: "vkGetPhysicalDeviceXlibPresentationSupportKHR",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "queueFamilyIndex",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "Display",
                ),
                name: "dpy",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VisualID",
                ),
                name: "visualID",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkBool32  vkGetPhysicalDeviceXlibPresentationSupportKHR ( VkPhysicalDevice  physicalDevice ,  uint32_t  queueFamilyIndex ,  Display*  dpy ,  VisualID  visualID );",
}
Extension {
    name: "VK_MVK_ios_surface",
    comment: None,
    number: Some(
        123,
    ),
    protect: None,
    platform: Some(
        "ios",
    ),
    author: Some(
        "MVK",
    ),
    contact: Some(
        "Bill Hollings @billhollings",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_EXT_metal_surface",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_MVK_IOS_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_MVK_IOS_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_MVK_ios_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkIOSSurfaceCreateFlagsMVK",
                    comment: None,
                },
                Type {
                    name: "VkIOSSurfaceCreateInfoMVK",
                    comment: None,
                },
                Command {
                    name: "vkCreateIOSSurfaceMVK",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateIOSSurfaceMVK",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkIOSSurfaceCreateInfoMVK",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateIOSSurfaceMVK ( VkInstance  instance , const  VkIOSSurfaceCreateInfoMVK*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
Extension {
    name: "VK_MVK_macos_surface",
    comment: None,
    number: Some(
        124,
    ),
    protect: None,
    platform: Some(
        "macos",
    ),
    author: Some(
        "MVK",
    ),
    contact: Some(
        "Bill Hollings @billhollings",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_EXT_metal_surface",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_MVK_MACOS_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_MVK_MACOS_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_MVK_macos_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkMacOSSurfaceCreateFlagsMVK",
                    comment: None,
                },
                Type {
                    name: "VkMacOSSurfaceCreateInfoMVK",
                    comment: None,
                },
                Command {
                    name: "vkCreateMacOSSurfaceMVK",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateMacOSSurfaceMVK",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMacOSSurfaceCreateInfoMVK",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateMacOSSurfaceMVK ( VkInstance  instance , const  VkMacOSSurfaceCreateInfoMVK*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
Extension {
    name: "VK_NN_vi_surface",
    comment: None,
    number: Some(
        63,
    ),
    protect: None,
    platform: Some(
        "vi",
    ),
    author: Some(
        "NN",
    ),
    contact: Some(
        "Mathias Heyer gitlab:@mheyer",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: Some(
        "VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NN_VI_SURFACE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NN_VI_SURFACE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NN_vi_surface\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkViSurfaceCreateFlagsNN",
                    comment: None,
                },
                Type {
                    name: "VkViSurfaceCreateInfoNN",
                    comment: None,
                },
                Command {
                    name: "vkCreateViSurfaceNN",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateViSurfaceNN",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkInstance",
                ),
                name: "instance",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkViSurfaceCreateInfoNN",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkSurfaceKHR",
                ),
                name: "pSurface",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateViSurfaceNN ( VkInstance  instance , const  VkViSurfaceCreateInfoNN*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkSurfaceKHR*  pSurface );",
}
Extension {
    name: "VK_NVX_image_view_handle",
    comment: None,
    number: Some(
        31,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NVX",
    ),
    contact: Some(
        "Eric Werness @ewerness",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NVX_image_view_handle\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImageViewHandleInfoNVX",
                    comment: None,
                },
                Type {
                    name: "VkImageViewAddressPropertiesNVX",
                    comment: None,
                },
                Command {
                    name: "vkGetImageViewHandleNVX",
                    comment: None,
                },
                Command {
                    name: "vkGetImageViewAddressNVX",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "uint32_t",
        ),
        name: "vkGetImageViewHandleNVX",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageViewHandleInfoNVX",
                ),
                name: "pInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " uint32_t  vkGetImageViewHandleNVX ( VkDevice  device , const  VkImageViewHandleInfoNVX*  pInfo );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_UNKNOWN",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetImageViewAddressNVX",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageView",
                ),
                name: "imageView",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageViewAddressPropertiesNVX",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetImageViewAddressNVX ( VkDevice  device ,  VkImageView  imageView ,  VkImageViewAddressPropertiesNVX*  pProperties );",
}
Extension {
    name: "VK_NVX_multiview_per_view_attributes",
    comment: None,
    number: Some(
        98,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NVX",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_multiview",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NVX_multiview_per_view_attributes\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 0,
                            extends: Some(
                                "VkSubpassDescriptionFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 1,
                            extends: Some(
                                "VkSubpassDescriptionFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_clip_space_w_scaling",
    comment: None,
    number: Some(
        88,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Eric Werness @ewerness-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_clip_space_w_scaling\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkViewportWScalingNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineViewportWScalingStateCreateInfoNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetViewportWScalingNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetViewportWScalingNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstViewport",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "viewportCount",
            },
        },
        CommandParam {
            len: Some(
                "viewportCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkViewportWScalingNV",
                ),
                name: "pViewportWScalings",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetViewportWScalingNV ( VkCommandBuffer  commandBuffer ,  uint32_t  firstViewport ,  uint32_t  viewportCount , const  VkViewportWScalingNV*  pViewportWScalings );",
}
Extension {
    name: "VK_NV_compute_shader_derivatives",
    comment: None,
    number: Some(
        202,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Pat Brown @nvpbrown",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_compute_shader_derivatives\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_cooperative_matrix",
    comment: None,
    number: Some(
        250,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_cooperative_matrix\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkCooperativeMatrixPropertiesNV",
                    comment: None,
                },
                Type {
                    name: "VkScopeNV",
                    comment: None,
                },
                Type {
                    name: "VkComponentTypeNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceCooperativeMatrixFeaturesNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceCooperativeMatrixPropertiesNV",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pPropertyCount",
            },
        },
        CommandParam {
            len: Some(
                "pPropertyCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCooperativeMatrixPropertiesNV",
                ),
                name: "pProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceCooperativeMatrixPropertiesNV ( VkPhysicalDevice  physicalDevice ,  uint32_t*  pPropertyCount ,  VkCooperativeMatrixPropertiesNV*  pProperties );",
}
Extension {
    name: "VK_NV_corner_sampled_image",
    comment: None,
    number: Some(
        51,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_corner_sampled_image\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 13,
                            extends: Some(
                                "VkImageCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceCornerSampledImageFeaturesNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_coverage_reduction_mode",
    comment: None,
    number: Some(
        251,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Kedarnath Thangudu @kthangudu",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_NV_framebuffer_mixed_samples",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_coverage_reduction_mode\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceCoverageReductionModeFeaturesNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineCoverageReductionStateCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineCoverageReductionStateCreateFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkCoverageReductionModeNV",
                    comment: None,
                },
                Type {
                    name: "VkFramebufferMixedSamplesCombinationNV",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_INCOMPLETE",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pCombinationCount",
            },
        },
        CommandParam {
            len: Some(
                "pCombinationCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFramebufferMixedSamplesCombinationNV",
                ),
                name: "pCombinations",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV ( VkPhysicalDevice  physicalDevice ,  uint32_t*  pCombinationCount ,  VkFramebufferMixedSamplesCombinationNV*  pCombinations );",
}
Extension {
    name: "VK_NV_dedicated_allocation",
    comment: None,
    number: Some(
        27,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_KHR_dedicated_allocation",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_dedicated_allocation\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkDedicatedAllocationImageCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkDedicatedAllocationBufferCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkDedicatedAllocationMemoryAllocateInfoNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_dedicated_allocation_image_aliasing",
    comment: None,
    number: Some(
        241,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NVIDIA",
    ),
    contact: Some(
        "Nuno Subtil @nsubtil",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_dedicated_allocation",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_dedicated_allocation_image_aliasing\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_device_diagnostic_checkpoints",
    comment: None,
    number: Some(
        207,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NVIDIA",
    ),
    contact: Some(
        "Nuno Subtil @nsubtil",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_device_diagnostic_checkpoints\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkQueueFamilyCheckpointPropertiesNV",
                    comment: None,
                },
                Type {
                    name: "VkCheckpointDataNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetCheckpointNV",
                    comment: None,
                },
                Command {
                    name: "vkGetQueueCheckpointDataNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics,compute,transfer",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetCheckpointNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: Some(
                "true",
            ),
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pCheckpointMarker",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetCheckpointNV ( VkCommandBuffer  commandBuffer , const  void*  pCheckpointMarker );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkGetQueueCheckpointDataNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueue",
                ),
                name: "queue",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "false,true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "pCheckpointDataCount",
            },
        },
        CommandParam {
            len: Some(
                "pCheckpointDataCount",
            ),
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCheckpointDataNV",
                ),
                name: "pCheckpointData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkGetQueueCheckpointDataNV ( VkQueue  queue ,  uint32_t*  pCheckpointDataCount ,  VkCheckpointDataNV*  pCheckpointData );",
}
Extension {
    name: "VK_NV_device_diagnostics_config",
    comment: None,
    number: Some(
        301,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Kedarnath Thangudu @kthangudu",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_device_diagnostics_config\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceDiagnosticsConfigFeaturesNV",
                    comment: None,
                },
                Type {
                    name: "VkDeviceDiagnosticsConfigCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkDeviceDiagnosticsConfigFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkDeviceDiagnosticsConfigFlagBitsNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_device_generated_commands",
    comment: None,
    number: Some(
        278,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Christoph Kubisch @pixeljetstream",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_device_generated_commands\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 18,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 17,
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 17,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 18,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV",
                        comment: Some(
                            "VkIndirectCommandsLayoutNV",
                        ),
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV",
                    comment: None,
                },
                Type {
                    name: "VkGraphicsShaderGroupCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkGraphicsPipelineShaderGroupsCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkBindShaderGroupIndirectCommandNV",
                    comment: None,
                },
                Type {
                    name: "VkBindIndexBufferIndirectCommandNV",
                    comment: None,
                },
                Type {
                    name: "VkBindVertexBufferIndirectCommandNV",
                    comment: None,
                },
                Type {
                    name: "VkSetStateFlagsIndirectCommandNV",
                    comment: None,
                },
                Type {
                    name: "VkIndirectStateFlagBitsNV",
                    comment: None,
                },
                Type {
                    name: "VkIndirectStateFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkIndirectCommandsLayoutNV",
                    comment: None,
                },
                Type {
                    name: "VkIndirectCommandsTokenTypeNV",
                    comment: None,
                },
                Type {
                    name: "VkIndirectCommandsLayoutUsageFlagBitsNV",
                    comment: None,
                },
                Type {
                    name: "VkIndirectCommandsLayoutUsageFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkIndirectCommandsStreamNV",
                    comment: None,
                },
                Type {
                    name: "VkIndirectCommandsLayoutTokenNV",
                    comment: None,
                },
                Type {
                    name: "VkIndirectCommandsLayoutCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkGeneratedCommandsInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkGeneratedCommandsMemoryRequirementsInfoNV",
                    comment: None,
                },
                Command {
                    name: "vkGetGeneratedCommandsMemoryRequirementsNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdPreprocessGeneratedCommandsNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdExecuteGeneratedCommandsNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdBindPipelineShaderGroupNV",
                    comment: None,
                },
                Command {
                    name: "vkCreateIndirectCommandsLayoutNV",
                    comment: None,
                },
                Command {
                    name: "vkDestroyIndirectCommandsLayoutNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkGetGeneratedCommandsMemoryRequirementsNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkGeneratedCommandsMemoryRequirementsInfoNV",
                ),
                name: "pInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMemoryRequirements2",
                ),
                name: "pMemoryRequirements",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkGetGeneratedCommandsMemoryRequirementsNV ( VkDevice  device , const  VkGeneratedCommandsMemoryRequirementsInfoNV*  pInfo ,  VkMemoryRequirements2*  pMemoryRequirements );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdPreprocessGeneratedCommandsNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkGeneratedCommandsInfoNV",
                ),
                name: "pGeneratedCommandsInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdPreprocessGeneratedCommandsNV ( VkCommandBuffer  commandBuffer , const  VkGeneratedCommandsInfoNV*  pGeneratedCommandsInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "inside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdExecuteGeneratedCommandsNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBool32",
                ),
                name: "isPreprocessed",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkGeneratedCommandsInfoNV",
                ),
                name: "pGeneratedCommandsInfo",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdExecuteGeneratedCommandsNV ( VkCommandBuffer  commandBuffer ,  VkBool32  isPreprocessed , const  VkGeneratedCommandsInfoNV*  pGeneratedCommandsInfo );",
}
CommandDefinition {
    queues: Some(
        "graphics,compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBindPipelineShaderGroupNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineBindPoint",
                ),
                name: "pipelineBindPoint",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipeline",
                ),
                name: "pipeline",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "groupIndex",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBindPipelineShaderGroupNV ( VkCommandBuffer  commandBuffer ,  VkPipelineBindPoint  pipelineBindPoint ,  VkPipeline  pipeline ,  uint32_t  groupIndex );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateIndirectCommandsLayoutNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkIndirectCommandsLayoutCreateInfoNV",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkIndirectCommandsLayoutNV",
                ),
                name: "pIndirectCommandsLayout",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateIndirectCommandsLayoutNV ( VkDevice  device , const  VkIndirectCommandsLayoutCreateInfoNV*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkIndirectCommandsLayoutNV*  pIndirectCommandsLayout );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroyIndirectCommandsLayoutNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkIndirectCommandsLayoutNV",
                ),
                name: "indirectCommandsLayout",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroyIndirectCommandsLayoutNV ( VkDevice  device ,  VkIndirectCommandsLayoutNV  indirectCommandsLayout , const  VkAllocationCallbacks*  pAllocator );",
}
Extension {
    name: "VK_NV_external_memory",
    comment: None,
    number: Some(
        57,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_NV_external_memory_capabilities",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_KHR_external_memory",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_EXTERNAL_MEMORY_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_external_memory\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkExternalMemoryImageCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkExportMemoryAllocateInfoNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_external_memory_capabilities",
    comment: None,
    number: Some(
        56,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "instance",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_KHR_external_memory_capabilities",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_external_memory_capabilities\"",
                            extends: None,
                        },
                    },
                ),
                Type {
                    name: "VkExternalMemoryHandleTypeFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkExternalMemoryHandleTypeFlagBitsNV",
                    comment: None,
                },
                Type {
                    name: "VkExternalMemoryFeatureFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkExternalMemoryFeatureFlagBitsNV",
                    comment: None,
                },
                Type {
                    name: "VkExternalImageFormatPropertiesNV",
                    comment: None,
                },
                Command {
                    name: "vkGetPhysicalDeviceExternalImageFormatPropertiesNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetPhysicalDeviceExternalImageFormatPropertiesNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPhysicalDevice",
                ),
                name: "physicalDevice",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFormat",
                ),
                name: "format",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageType",
                ),
                name: "type",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageTiling",
                ),
                name: "tiling",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageUsageFlags",
                ),
                name: "usage",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageCreateFlags",
                ),
                name: "flags",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkExternalMemoryHandleTypeFlagsNV",
                ),
                name: "externalHandleType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkExternalImageFormatPropertiesNV",
                ),
                name: "pExternalImageFormatProperties",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetPhysicalDeviceExternalImageFormatPropertiesNV ( VkPhysicalDevice  physicalDevice ,  VkFormat  format ,  VkImageType  type ,  VkImageTiling  tiling ,  VkImageUsageFlags  usage ,  VkImageCreateFlags  flags ,  VkExternalMemoryHandleTypeFlagsNV  externalHandleType ,  VkExternalImageFormatPropertiesNV*  pExternalImageFormatProperties );",
}
Extension {
    name: "VK_NV_external_memory_win32",
    comment: None,
    number: Some(
        58,
    ),
    protect: None,
    platform: Some(
        "win32",
    ),
    author: Some(
        "NV",
    ),
    contact: Some(
        "James Jones @cubanismo",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_NV_external_memory",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "VK_KHR_external_memory_win32",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_external_memory_win32\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkImportMemoryWin32HandleInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkExportMemoryWin32HandleInfoNV",
                    comment: None,
                },
                Command {
                    name: "vkGetMemoryWin32HandleNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetMemoryWin32HandleNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceMemory",
                ),
                name: "memory",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkExternalMemoryHandleTypeFlagsNV",
                ),
                name: "handleType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "HANDLE",
                ),
                name: "pHandle",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetMemoryWin32HandleNV ( VkDevice  device ,  VkDeviceMemory  memory ,  VkExternalMemoryHandleTypeFlagsNV  handleType ,  HANDLE*  pHandle );",
}
Extension {
    name: "VK_NV_fill_rectangle",
    comment: None,
    number: Some(
        154,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_FILL_RECTANGLE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_FILL_RECTANGLE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_fill_rectangle\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_POLYGON_MODE_FILL_RECTANGLE_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkPolygonMode",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_NV_fragment_coverage_to_color",
    comment: None,
    number: Some(
        150,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_fragment_coverage_to_color\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPipelineCoverageToColorStateCreateFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineCoverageToColorStateCreateInfoNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_fragment_shader_barycentric",
    comment: None,
    number: Some(
        204,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Pat Brown @nvpbrown",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_fragment_shader_barycentric\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_fragment_shading_rate_enums",
    comment: None,
    number: Some(
        327,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Pat Brown @nvpbrown",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_fragment_shading_rate",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_fragment_shading_rate_enums\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineFragmentShadingRateEnumStateCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkFragmentShadingRateNV",
                    comment: None,
                },
                Type {
                    name: "VkFragmentShadingRateTypeNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetFragmentShadingRateEnumNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetFragmentShadingRateEnumNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFragmentShadingRateNV",
                ),
                name: "shadingRate",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkFragmentShadingRateCombinerOpKHR",
                ),
                name: "combinerOps",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetFragmentShadingRateEnumNV ( VkCommandBuffer            commandBuffer ,  VkFragmentShadingRateNV                      shadingRate , const  VkFragmentShadingRateCombinerOpKHR     combinerOps[2] );",
}
Extension {
    name: "VK_NV_framebuffer_mixed_samples",
    comment: None,
    number: Some(
        153,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_framebuffer_mixed_samples\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPipelineCoverageModulationStateCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineCoverageModulationStateCreateFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkCoverageModulationModeNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_geometry_shader_passthrough",
    comment: None,
    number: Some(
        96,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_geometry_shader_passthrough\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_NV_glsl_shader",
    comment: None,
    number: Some(
        13,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: Some(
        "",
    ),
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_GLSL_SHADER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_GLSL_SHADER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_glsl_shader\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ERROR_INVALID_SHADER_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkResult",
                            extnumber: None,
                            dir: false,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_NV_mesh_shader",
    comment: None,
    number: Some(
        203,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Christoph Kubisch @pixeljetstream",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_MESH_SHADER_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_MESH_SHADER_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_mesh_shader\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_TASK_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 6,
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_MESH_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 7,
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 19,
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 20,
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Command {
                    name: "vkCmdDrawMeshTasksNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdDrawMeshTasksIndirectNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdDrawMeshTasksIndirectCountNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceMeshShaderFeaturesNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceMeshShaderPropertiesNV",
                    comment: None,
                },
                Type {
                    name: "VkDrawMeshTasksIndirectCommandNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "inside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "graphics",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdDrawMeshTasksNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "taskCount",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstTask",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdDrawMeshTasksNV ( VkCommandBuffer  commandBuffer ,  uint32_t  taskCount ,  uint32_t  firstTask );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "inside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "graphics",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdDrawMeshTasksIndirectNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "buffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "offset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "drawCount",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "stride",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdDrawMeshTasksIndirectNV ( VkCommandBuffer  commandBuffer ,  VkBuffer  buffer ,  VkDeviceSize  offset ,  uint32_t  drawCount ,  uint32_t  stride );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "inside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: Some(
        "graphics",
    ),
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdDrawMeshTasksIndirectCountNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "buffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "offset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "countBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "countBufferOffset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "maxDrawCount",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "stride",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdDrawMeshTasksIndirectCountNV ( VkCommandBuffer  commandBuffer ,  VkBuffer  buffer ,  VkDeviceSize  offset ,  VkBuffer  countBuffer ,  VkDeviceSize  countBufferOffset ,  uint32_t  maxDrawCount ,  uint32_t  stride );",
}
Extension {
    name: "VK_NV_ray_tracing",
    comment: None,
    number: Some(
        166,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Eric Werness @ewerness",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2,VK_KHR_get_memory_requirements2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_RAY_TRACING_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_RAY_TRACING_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_ray_tracing\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_UNUSED_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: None,
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_GEOMETRY_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 7,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 8,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 9,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 11,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 12,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_RAYGEN_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SHADER_STAGE_RAYGEN_BIT_KHR",
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_ANY_HIT_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SHADER_STAGE_ANY_HIT_BIT_KHR",
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR",
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_MISS_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SHADER_STAGE_MISS_BIT_KHR",
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_INTERSECTION_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SHADER_STAGE_INTERSECTION_BIT_KHR",
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SHADER_STAGE_CALLABLE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_SHADER_STAGE_CALLABLE_BIT_KHR",
                            extends: Some(
                                "VkShaderStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR",
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR",
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUFFER_USAGE_RAY_TRACING_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR",
                            extends: Some(
                                "VkBufferUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_BIND_POINT_RAY_TRACING_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR",
                            extends: Some(
                                "VkPipelineBindPoint",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDescriptorType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR",
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR",
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkQueryType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 5,
                            extends: Some(
                                "VkPipelineCreateFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkObjectType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkDebugReportObjectTypeEXT",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_INDEX_TYPE_NONE_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_INDEX_TYPE_NONE_KHR",
                            extends: Some(
                                "VkIndexType",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkRayTracingShaderGroupCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkRayTracingShaderGroupTypeNV",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR",
                            extends: Some(
                                "VkRayTracingShaderGroupTypeKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR",
                            extends: Some(
                                "VkRayTracingShaderGroupTypeKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR",
                            extends: Some(
                                "VkRayTracingShaderGroupTypeKHR",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkRayTracingPipelineCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkGeometryTypeNV",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_GEOMETRY_TYPE_TRIANGLES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_GEOMETRY_TYPE_TRIANGLES_KHR",
                            extends: Some(
                                "VkGeometryTypeKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GEOMETRY_TYPE_AABBS_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_GEOMETRY_TYPE_AABBS_KHR",
                            extends: Some(
                                "VkGeometryTypeKHR",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkAccelerationStructureTypeNV",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR",
                            extends: Some(
                                "VkAccelerationStructureTypeKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR",
                            extends: Some(
                                "VkAccelerationStructureTypeKHR",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkGeometryTrianglesNV",
                    comment: None,
                },
                Type {
                    name: "VkGeometryAABBNV",
                    comment: None,
                },
                Type {
                    name: "VkGeometryDataNV",
                    comment: None,
                },
                Type {
                    name: "VkGeometryNV",
                    comment: None,
                },
                Type {
                    name: "VkGeometryFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkGeometryFlagBitsNV",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_GEOMETRY_OPAQUE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_GEOMETRY_OPAQUE_BIT_KHR",
                            extends: Some(
                                "VkGeometryFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR",
                            extends: Some(
                                "VkGeometryFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkGeometryInstanceFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkGeometryInstanceFlagBitsNV",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR",
                            extends: Some(
                                "VkGeometryInstanceFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR",
                            extends: Some(
                                "VkGeometryInstanceFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR",
                            extends: Some(
                                "VkGeometryInstanceFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR",
                            extends: Some(
                                "VkGeometryInstanceFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkAccelerationStructureInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureNV",
                    comment: None,
                },
                Type {
                    name: "VkBuildAccelerationStructureFlagBitsNV",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR",
                            extends: Some(
                                "VkBuildAccelerationStructureFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR",
                            extends: Some(
                                "VkBuildAccelerationStructureFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR",
                            extends: Some(
                                "VkBuildAccelerationStructureFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR",
                            extends: Some(
                                "VkBuildAccelerationStructureFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR",
                            extends: Some(
                                "VkBuildAccelerationStructureFlagBitsKHR",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkBuildAccelerationStructureFlagsNV",
                    comment: None,
                },
                Type {
                    name: "VkCopyAccelerationStructureModeNV",
                    comment: None,
                },
                Enum(
                    Enum {
                        name: "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR",
                            extends: Some(
                                "VkCopyAccelerationStructureModeKHR",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Alias {
                            alias: "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR",
                            extends: Some(
                                "VkCopyAccelerationStructureModeKHR",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkBindAccelerationStructureMemoryInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkWriteDescriptorSetAccelerationStructureNV",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureMemoryRequirementsInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceRayTracingPropertiesNV",
                    comment: None,
                },
                Type {
                    name: "VkMemoryRequirements2KHR",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureMemoryRequirementsTypeNV",
                    comment: None,
                },
                Type {
                    name: "VkTransformMatrixNV",
                    comment: None,
                },
                Type {
                    name: "VkAabbPositionsNV",
                    comment: None,
                },
                Type {
                    name: "VkAccelerationStructureInstanceNV",
                    comment: None,
                },
                Command {
                    name: "vkCreateAccelerationStructureNV",
                    comment: None,
                },
                Command {
                    name: "vkDestroyAccelerationStructureNV",
                    comment: None,
                },
                Command {
                    name: "vkGetAccelerationStructureMemoryRequirementsNV",
                    comment: None,
                },
                Command {
                    name: "vkBindAccelerationStructureMemoryNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdBuildAccelerationStructureNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdCopyAccelerationStructureNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdTraceRaysNV",
                    comment: None,
                },
                Command {
                    name: "vkCreateRayTracingPipelinesNV",
                    comment: None,
                },
                Command {
                    name: "vkGetRayTracingShaderGroupHandlesNV",
                    comment: None,
                },
                Command {
                    name: "vkGetAccelerationStructureHandleNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdWriteAccelerationStructuresPropertiesNV",
                    comment: None,
                },
                Command {
                    name: "vkCompileDeferredNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateAccelerationStructureNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureCreateInfoNV",
                ),
                name: "pCreateInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureNV",
                ),
                name: "pAccelerationStructure",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateAccelerationStructureNV ( VkDevice  device , const  VkAccelerationStructureCreateInfoNV*  pCreateInfo , const  VkAllocationCallbacks*  pAllocator ,  VkAccelerationStructureNV*  pAccelerationStructure );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkDestroyAccelerationStructureNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureNV",
                ),
                name: "accelerationStructure",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkDestroyAccelerationStructureNV ( VkDevice  device ,  VkAccelerationStructureNV  accelerationStructure , const  VkAllocationCallbacks*  pAllocator );",
}
CommandDefinition {
    queues: None,
    successcodes: None,
    errorcodes: None,
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkGetAccelerationStructureMemoryRequirementsNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureMemoryRequirementsInfoNV",
                ),
                name: "pInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkMemoryRequirements2KHR",
                ),
                name: "pMemoryRequirements",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkGetAccelerationStructureMemoryRequirementsNV ( VkDevice  device , const  VkAccelerationStructureMemoryRequirementsInfoNV*  pInfo ,  VkMemoryRequirements2KHR*  pMemoryRequirements );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkBindAccelerationStructureMemoryNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "bindInfoCount",
            },
        },
        CommandParam {
            len: Some(
                "bindInfoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBindAccelerationStructureMemoryInfoNV",
                ),
                name: "pBindInfos",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkBindAccelerationStructureMemoryNV ( VkDevice  device ,  uint32_t  bindInfoCount , const  VkBindAccelerationStructureMemoryInfoNV*  pBindInfos );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBuildAccelerationStructureNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureInfoNV",
                ),
                name: "pInfo",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "instanceData",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "instanceOffset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBool32",
                ),
                name: "update",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureNV",
                ),
                name: "dst",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureNV",
                ),
                name: "src",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "scratch",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "scratchOffset",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBuildAccelerationStructureNV ( VkCommandBuffer  commandBuffer , const  VkAccelerationStructureInfoNV*  pInfo ,  VkBuffer  instanceData ,  VkDeviceSize  instanceOffset ,  VkBool32  update ,  VkAccelerationStructureNV  dst ,  VkAccelerationStructureNV  src ,  VkBuffer  scratch ,  VkDeviceSize  scratchOffset );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdCopyAccelerationStructureNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureNV",
                ),
                name: "dst",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureNV",
                ),
                name: "src",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCopyAccelerationStructureModeKHR",
                ),
                name: "mode",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdCopyAccelerationStructureNV ( VkCommandBuffer  commandBuffer ,  VkAccelerationStructureNV  dst ,  VkAccelerationStructureNV  src ,  VkCopyAccelerationStructureModeKHR  mode );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdTraceRaysNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "raygenShaderBindingTableBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "raygenShaderBindingOffset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "missShaderBindingTableBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "missShaderBindingOffset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "missShaderBindingStride",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "hitShaderBindingTableBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "hitShaderBindingOffset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "hitShaderBindingStride",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkBuffer",
                ),
                name: "callableShaderBindingTableBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "callableShaderBindingOffset",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDeviceSize",
                ),
                name: "callableShaderBindingStride",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "width",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "height",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "depth",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdTraceRaysNV ( VkCommandBuffer  commandBuffer ,  VkBuffer  raygenShaderBindingTableBuffer ,  VkDeviceSize  raygenShaderBindingOffset ,  VkBuffer  missShaderBindingTableBuffer ,  VkDeviceSize  missShaderBindingOffset ,  VkDeviceSize  missShaderBindingStride ,  VkBuffer  hitShaderBindingTableBuffer ,  VkDeviceSize  hitShaderBindingOffset ,  VkDeviceSize  hitShaderBindingStride ,  VkBuffer  callableShaderBindingTableBuffer ,  VkDeviceSize  callableShaderBindingOffset ,  VkDeviceSize  callableShaderBindingStride ,  uint32_t  width ,  uint32_t  height ,  uint32_t  depth );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCreateRayTracingPipelinesNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipelineCache",
                ),
                name: "pipelineCache",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "createInfoCount",
            },
        },
        CommandParam {
            len: Some(
                "createInfoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkRayTracingPipelineCreateInfoNV",
                ),
                name: "pCreateInfos",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAllocationCallbacks",
                ),
                name: "pAllocator",
            },
        },
        CommandParam {
            len: Some(
                "createInfoCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipeline",
                ),
                name: "pPipelines",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCreateRayTracingPipelinesNV ( VkDevice  device ,  VkPipelineCache  pipelineCache ,  uint32_t  createInfoCount , const  VkRayTracingPipelineCreateInfoNV*  pCreateInfos , const  VkAllocationCallbacks*  pAllocator ,  VkPipeline*  pPipelines );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkGetAccelerationStructureHandleNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureNV",
                ),
                name: "accelerationStructure",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "size_t",
                ),
                name: "dataSize",
            },
        },
        CommandParam {
            len: Some(
                "dataSize",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "void",
                ),
                name: "pData",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkGetAccelerationStructureHandleNV ( VkDevice  device ,  VkAccelerationStructureNV  accelerationStructure ,  size_t  dataSize ,  void*  pData );",
}
CommandDefinition {
    queues: Some(
        "compute",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "outside",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdWriteAccelerationStructuresPropertiesNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "accelerationStructureCount",
            },
        },
        CommandParam {
            len: Some(
                "accelerationStructureCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkAccelerationStructureNV",
                ),
                name: "pAccelerationStructures",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueryType",
                ),
                name: "queryType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkQueryPool",
                ),
                name: "queryPool",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstQuery",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdWriteAccelerationStructuresPropertiesNV ( VkCommandBuffer  commandBuffer ,  uint32_t  accelerationStructureCount , const  VkAccelerationStructureNV*  pAccelerationStructures ,  VkQueryType  queryType ,  VkQueryPool  queryPool ,  uint32_t  firstQuery );",
}
CommandDefinition {
    queues: None,
    successcodes: Some(
        "VK_SUCCESS",
    ),
    errorcodes: Some(
        "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY",
    ),
    renderpass: None,
    cmdbufferlevel: None,
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "VkResult",
        ),
        name: "vkCompileDeferredNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkDevice",
                ),
                name: "device",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkPipeline",
                ),
                name: "pipeline",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "shader",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " VkResult  vkCompileDeferredNV ( VkDevice  device ,  VkPipeline  pipeline ,  uint32_t  shader );",
}
Extension {
    name: "VK_NV_representative_fragment_test",
    comment: None,
    number: Some(
        167,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Kedarnath Thangudu @kthangudu",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_representative_fragment_test\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineRepresentativeFragmentTestStateCreateInfoNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_sample_mask_override_coverage",
    comment: None,
    number: Some(
        95,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_sample_mask_override_coverage\"",
                            extends: None,
                        },
                    },
                ),
                Comment(
                    "\n                    enum offset=0 was mistakenly used for the 1.1 core enum\n                    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES\n                    (value=1000094000). Fortunately, no conflict resulted.\n                ",
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_NV_scissor_exclusive",
    comment: None,
    number: Some(
        206,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Pat Brown @nvpbrown",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_scissor_exclusive\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPipelineViewportExclusiveScissorStateCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceExclusiveScissorFeaturesNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetExclusiveScissorNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetExclusiveScissorNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstExclusiveScissor",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "exclusiveScissorCount",
            },
        },
        CommandParam {
            len: Some(
                "exclusiveScissorCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkRect2D",
                ),
                name: "pExclusiveScissors",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetExclusiveScissorNV ( VkCommandBuffer  commandBuffer ,  uint32_t  firstExclusiveScissor ,  uint32_t  exclusiveScissorCount , const  VkRect2D*  pExclusiveScissors );",
}
Extension {
    name: "VK_NV_shader_image_footprint",
    comment: None,
    number: Some(
        205,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Pat Brown @nvpbrown",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_shader_image_footprint\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderImageFootprintFeaturesNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_shader_sm_builtins",
    comment: None,
    number: Some(
        155,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_shader_sm_builtins\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_shader_subgroup_partitioned",
    comment: None,
    number: Some(
        199,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Jeff Bolz @jeffbolznv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: Some(
        "1.1",
    ),
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_shader_subgroup_partitioned\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 8,
                            extends: Some(
                                "VkSubgroupFeatureFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_NV_shading_rate_image",
    comment: None,
    number: Some(
        165,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Pat Brown @nvpbrown",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_get_physical_device_properties2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "3",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_shading_rate_image\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 2,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 3,
                            extends: "VkImageLayout",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 4,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 23,
                            extends: Some(
                                "VkAccessFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 8,
                            extends: Some(
                                "VkImageUsageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 22,
                            extends: Some(
                                "VkPipelineStageFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 5,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 6,
                            extends: "VkDynamicState",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkShadingRatePaletteEntryNV",
                    comment: None,
                },
                Type {
                    name: "VkShadingRatePaletteNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineViewportShadingRateImageStateCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceShadingRateImageFeaturesNV",
                    comment: None,
                },
                Type {
                    name: "VkPhysicalDeviceShadingRateImagePropertiesNV",
                    comment: None,
                },
                Type {
                    name: "VkCoarseSampleLocationNV",
                    comment: None,
                },
                Type {
                    name: "VkCoarseSampleOrderCustomNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkCoarseSampleOrderTypeNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdBindShadingRateImageNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetViewportShadingRatePaletteNV",
                    comment: None,
                },
                Command {
                    name: "vkCmdSetCoarseSampleOrderNV",
                    comment: None,
                },
            ],
        },
    ],
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdBindShadingRateImageNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageView",
                ),
                name: "imageView",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkImageLayout",
                ),
                name: "imageLayout",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdBindShadingRateImageNV ( VkCommandBuffer  commandBuffer ,  VkImageView  imageView ,  VkImageLayout  imageLayout );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetViewportShadingRatePaletteNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "firstViewport",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "viewportCount",
            },
        },
        CommandParam {
            len: Some(
                "viewportCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkShadingRatePaletteNV",
                ),
                name: "pShadingRatePalettes",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetViewportShadingRatePaletteNV ( VkCommandBuffer  commandBuffer ,  uint32_t  firstViewport ,  uint32_t  viewportCount , const  VkShadingRatePaletteNV*  pShadingRatePalettes );",
}
CommandDefinition {
    queues: Some(
        "graphics",
    ),
    successcodes: None,
    errorcodes: None,
    renderpass: Some(
        "both",
    ),
    cmdbufferlevel: Some(
        "primary,secondary",
    ),
    pipeline: None,
    comment: None,
    proto: NameWithType {
        type_name: Some(
            "void",
        ),
        name: "vkCmdSetCoarseSampleOrderNV",
    },
    params: [
        CommandParam {
            len: None,
            altlen: None,
            externsync: Some(
                "true",
            ),
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCommandBuffer",
                ),
                name: "commandBuffer",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCoarseSampleOrderTypeNV",
                ),
                name: "sampleOrderType",
            },
        },
        CommandParam {
            len: None,
            altlen: None,
            externsync: None,
            optional: Some(
                "true",
            ),
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "uint32_t",
                ),
                name: "customSampleOrderCount",
            },
        },
        CommandParam {
            len: Some(
                "customSampleOrderCount",
            ),
            altlen: None,
            externsync: None,
            optional: None,
            noautovalidity: None,
            definition: NameWithType {
                type_name: Some(
                    "VkCoarseSampleOrderCustomNV",
                ),
                name: "pCustomSampleOrders",
            },
        },
    ],
    alias: None,
    description: None,
    implicitexternsyncparams: [],
    code: " void  vkCmdSetCoarseSampleOrderNV ( VkCommandBuffer  commandBuffer ,  VkCoarseSampleOrderTypeNV  sampleOrderType ,  uint32_t  customSampleOrderCount , const  VkCoarseSampleOrderCustomNV*  pCustomSampleOrders );",
}
Extension {
    name: "VK_NV_viewport_array2",
    comment: None,
    number: Some(
        97,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Daniel Koch @dgkoch",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_viewport_array2\"",
                            extends: None,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_NV_viewport_swizzle",
    comment: None,
    number: Some(
        99,
    ),
    protect: None,
    platform: None,
    author: Some(
        "NV",
    ),
    contact: Some(
        "Piers Daniell @pdaniell-nv",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_viewport_swizzle\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkViewportSwizzleNV",
                    comment: None,
                },
                Type {
                    name: "VkViewportCoordinateSwizzleNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineViewportSwizzleStateCreateInfoNV",
                    comment: None,
                },
                Type {
                    name: "VkPipelineViewportSwizzleStateCreateFlagsNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_NV_win32_keyed_mutex",
    comment: None,
    number: Some(
        59,
    ),
    protect: None,
    platform: Some(
        "win32",
    ),
    author: Some(
        "NV",
    ),
    contact: Some(
        "Carsten Rohde @crohde",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_NV_external_memory_win32",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: Some(
        "VK_KHR_win32_keyed_mutex",
    ),
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_NV_win32_keyed_mutex\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkWin32KeyedMutexAcquireReleaseInfoNV",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_QCOM_render_pass_shader_resolve",
    comment: None,
    number: Some(
        172,
    ),
    protect: None,
    platform: None,
    author: Some(
        "QCOM",
    ),
    contact: Some(
        "Bill Licea-Kane @wwlk",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "4",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_QCOM_render_pass_shader_resolve\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 2,
                            extends: Some(
                                "VkSubpassDescriptionFlagBits",
                            ),
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 3,
                            extends: Some(
                                "VkSubpassDescriptionFlagBits",
                            ),
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_QCOM_render_pass_store_ops",
    comment: None,
    number: Some(
        302,
    ),
    protect: None,
    platform: None,
    author: Some(
        "QCOM",
    ),
    contact: Some(
        "Bill Licea-Kane @wwlk",
    ),
    ext_type: Some(
        "device",
    ),
    requires: None,
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_QCOM_render_pass_store_ops_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "2",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QCOM_render_pass_store_ops_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_QCOM_render_pass_store_ops\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_ATTACHMENT_STORE_OP_NONE_QCOM",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkAttachmentStoreOp",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
            ],
        },
    ],
}
Extension {
    name: "VK_QCOM_render_pass_transform",
    comment: None,
    number: Some(
        283,
    ),
    protect: None,
    platform: None,
    author: Some(
        "QCOM",
    ),
    contact: Some(
        "Jeff Leger @jackohound",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_swapchain,VK_KHR_surface",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "1",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_QCOM_render_pass_transform\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 1,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Bitpos {
                            bitpos: 1,
                            extends: Some(
                                "VkRenderPassCreateFlagBits",
                            ),
                        },
                    },
                ),
                Type {
                    name: "VkRenderPassTransformBeginInfoQCOM",
                    comment: None,
                },
                Type {
                    name: "VkCommandBufferInheritanceRenderPassTransformInfoQCOM",
                    comment: None,
                },
            ],
        },
    ],
}
Extension {
    name: "VK_QCOM_rotated_copy_commands",
    comment: None,
    number: Some(
        334,
    ),
    protect: None,
    platform: None,
    author: Some(
        "QCOM",
    ),
    contact: Some(
        "Jeff Leger @jackohound",
    ),
    ext_type: Some(
        "device",
    ),
    requires: Some(
        "VK_KHR_swapchain,VK_KHR_copy_commands2",
    ),
    requires_core: None,
    supported: Some(
        "vulkan",
    ),
    deprecatedby: None,
    promotedto: None,
    obsoletedby: None,
    provisional: false,
    specialuse: None,
    sortorder: None,
    children: [
        Require {
            api: None,
            profile: None,
            extension: None,
            feature: None,
            comment: None,
            items: [
                Enum(
                    Enum {
                        name: "VK_QCOM_rotated_copy_commands_SPEC_VERSION",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "0",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_QCOM_rotated_copy_commands_EXTENSION_NAME",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Value {
                            value: "\"VK_QCOM_rotated_copy_commands\"",
                            extends: None,
                        },
                    },
                ),
                Enum(
                    Enum {
                        name: "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM",
                        comment: None,
                        type_suffix: None,
                        api: None,
                        spec: Offset {
                            offset: 0,
                            extends: "VkStructureType",
                            extnumber: None,
                            dir: true,
                        },
                    },
                ),
                Type {
                    name: "VkCopyCommandTransformInfoQCOM",
                    comment: None,
                },
            ],
        },
    ],
}
